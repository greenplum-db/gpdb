CREATE EXTENSION "uuid-ossp";
SELECT uuid_nil();
               uuid_nil               
--------------------------------------
 00000000-0000-0000-0000-000000000000
(1 row)

SELECT uuid_ns_dns();
             uuid_ns_dns              
--------------------------------------
 6ba7b810-9dad-11d1-80b4-00c04fd430c8
(1 row)

SELECT uuid_ns_url();
             uuid_ns_url              
--------------------------------------
 6ba7b811-9dad-11d1-80b4-00c04fd430c8
(1 row)

SELECT uuid_ns_oid();
             uuid_ns_oid              
--------------------------------------
 6ba7b812-9dad-11d1-80b4-00c04fd430c8
(1 row)

SELECT uuid_ns_x500();
             uuid_ns_x500             
--------------------------------------
 6ba7b814-9dad-11d1-80b4-00c04fd430c8
(1 row)

-- some quick and dirty field extraction functions
-- this is actually timestamp concatenated with clock sequence, per RFC 4122
CREATE FUNCTION uuid_timestamp_bits(uuid) RETURNS varbit AS
$$ SELECT ('x' || substr($1::text, 15, 4) || substr($1::text, 10, 4) ||
           substr($1::text, 1, 8) || substr($1::text, 20, 4))::bit(80)
          & x'0FFFFFFFFFFFFFFF3FFF' $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION uuid_version_bits(uuid) RETURNS varbit AS
$$ SELECT ('x' || substr($1::text, 15, 2))::bit(8) & '11110000' $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION uuid_reserved_bits(uuid) RETURNS varbit AS
$$ SELECT ('x' || substr($1::text, 20, 2))::bit(8) & '11000000' $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION uuid_multicast_bit(uuid) RETURNS bool AS
$$ SELECT (('x' || substr($1::text, 25, 2))::bit(8) & '00000001') != '00000000' $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION uuid_local_admin_bit(uuid) RETURNS bool AS
$$ SELECT (('x' || substr($1::text, 25, 2))::bit(8) & '00000010') != '00000000' $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION uuid_node(uuid) RETURNS text AS
$$ SELECT substr($1::text, 25) $$
LANGUAGE SQL STRICT IMMUTABLE;
-- Ideally, the multicast bit would never be set in V1 output, but the
-- UUID library may fall back to MC if it can't get the system MAC address.
-- Also, the local-admin bit might be set (if so, we're probably inside a VM).
-- So we can't test either bit here.
SELECT uuid_version_bits(uuid_generate_v1()),
       uuid_reserved_bits(uuid_generate_v1());
 uuid_version_bits | uuid_reserved_bits 
-------------------+--------------------
 00010000          | 10000000
(1 row)

-- Although RFC 4122 only requires the multicast bit to be set in V1MC style
-- UUIDs, our implementation always sets the local-admin bit as well.
SELECT uuid_version_bits(uuid_generate_v1mc()),
       uuid_reserved_bits(uuid_generate_v1mc()),
       uuid_multicast_bit(uuid_generate_v1mc()),
       uuid_local_admin_bit(uuid_generate_v1mc());
 uuid_version_bits | uuid_reserved_bits | uuid_multicast_bit | uuid_local_admin_bit 
-------------------+--------------------+--------------------+----------------------
 00010000          | 10000000           | t                  | t
(1 row)

-- timestamp+clock sequence should be monotonic increasing in v1
SELECT uuid_timestamp_bits(uuid_generate_v1()) < uuid_timestamp_bits(uuid_generate_v1());
 ?column? 
----------
 t
(1 row)

SELECT uuid_timestamp_bits(uuid_generate_v1mc()) < uuid_timestamp_bits(uuid_generate_v1mc());
 ?column? 
----------
 t
(1 row)

-- Ideally, the node value is stable in V1 addresses, but OSSP UUID
-- falls back to V1MC behavior if it can't get the system MAC address.
SELECT CASE WHEN uuid_multicast_bit(uuid_generate_v1()) AND
                 uuid_local_admin_bit(uuid_generate_v1()) THEN
         true -- punt, no test
       ELSE
         uuid_node(uuid_generate_v1()) = uuid_node(uuid_generate_v1())
       END;
 case 
------
 t
(1 row)

-- In any case, V1MC node addresses should be random.
SELECT uuid_node(uuid_generate_v1()) <> uuid_node(uuid_generate_v1mc());
 ?column? 
----------
 t
(1 row)

SELECT uuid_node(uuid_generate_v1mc()) <> uuid_node(uuid_generate_v1mc());
 ?column? 
----------
 t
(1 row)

SELECT uuid_generate_v3(uuid_ns_dns(), 'www.widgets.com');
           uuid_generate_v3           
--------------------------------------
 3d813cbb-47fb-32ba-91df-831e1593ac29
(1 row)

SELECT uuid_generate_v5(uuid_ns_dns(), 'www.widgets.com');
           uuid_generate_v5           
--------------------------------------
 21f7f8de-8051-5b89-8680-0195ef798b6a
(1 row)

SELECT uuid_version_bits(uuid_generate_v4()),
       uuid_reserved_bits(uuid_generate_v4());
 uuid_version_bits | uuid_reserved_bits 
-------------------+--------------------
 01000000          | 10000000
(1 row)

SELECT uuid_generate_v4() <> uuid_generate_v4();
 ?column? 
----------
 t
(1 row)

CREATE TABLE T(url TEXT) distributed BY (url);
INSERT INTO T (SELECT 'www.widgets' || num::TEXT || '.com' FROM generate_series(1, 10) AS num);
INSERT INTO T (SELECT 'www.widgets' || num::TEXT || '.com' FROM generate_series(1, 10) AS num);
SELECT uuid_generate_v3(uuid_ns_dns(), t.url) FROM T;
           uuid_generate_v3           
--------------------------------------
 98354fe6-e587-3d94-a8f4-34ed26bef8d7
 b26c743e-c7d6-318d-85d7-5d62e9893cbb
 98354fe6-e587-3d94-a8f4-34ed26bef8d7
 b26c743e-c7d6-318d-85d7-5d62e9893cbb
 29be2215-60f6-38df-b2ee-c3c666c231b7
 b43e916b-8ab4-3d92-a48b-8906bdf91a7b
 5628945f-7850-3bcf-975e-b0ef14d7be1e
 6c9f8438-44b5-3d45-92b7-3cbb666c7d93
 536bbf6b-48de-30f6-94f0-9385f227066c
 8f866393-0655-3843-8626-7fb2e20cb759
 754a4fb2-8430-3f45-86a0-b62f77ddf609
 29be2215-60f6-38df-b2ee-c3c666c231b7
 b43e916b-8ab4-3d92-a48b-8906bdf91a7b
 5628945f-7850-3bcf-975e-b0ef14d7be1e
 6c9f8438-44b5-3d45-92b7-3cbb666c7d93
 536bbf6b-48de-30f6-94f0-9385f227066c
 8f866393-0655-3843-8626-7fb2e20cb759
 754a4fb2-8430-3f45-86a0-b62f77ddf609
 dc3c4a5d-ba34-3413-ac64-f33928e94e7b
 dc3c4a5d-ba34-3413-ac64-f33928e94e7b
(20 rows)

SELECT uuid_generate_v5(uuid_ns_dns(), t.url) FROM T;
           uuid_generate_v5           
--------------------------------------
 3f3e7898-6d82-57c1-b2cb-329a7b5673eb
 a770350d-869e-5362-af04-a9abb9aaf100
 2617bca3-41e4-572f-97bd-f8bcec10aeff
 e0832682-f984-5420-9851-67f80731e6c9
 f0e382c7-bcbe-5f13-93a7-9deef3e94208
 ea7413df-d44d-5b6f-b89c-5c9afa7c771f
 04b98017-112a-5309-ae1a-564a7ef0fb16
 3f3e7898-6d82-57c1-b2cb-329a7b5673eb
 a770350d-869e-5362-af04-a9abb9aaf100
 2617bca3-41e4-572f-97bd-f8bcec10aeff
 e0832682-f984-5420-9851-67f80731e6c9
 f0e382c7-bcbe-5f13-93a7-9deef3e94208
 ea7413df-d44d-5b6f-b89c-5c9afa7c771f
 04b98017-112a-5309-ae1a-564a7ef0fb16
 a50ae42f-b6d5-5a5b-a296-3cb649277111
 21db6ff5-da85-5acc-9276-2519f27e26b4
 a50ae42f-b6d5-5a5b-a296-3cb649277111
 21db6ff5-da85-5acc-9276-2519f27e26b4
 8adf267e-dd06-54df-9d44-4bcee22f47e1
 8adf267e-dd06-54df-9d44-4bcee22f47e1
(20 rows)

