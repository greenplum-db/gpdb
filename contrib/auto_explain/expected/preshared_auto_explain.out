-- need to start cluster with gpconfig -c shared_preload_libraries -v 'auto_explain' before this test
SET enable_nestloop = ON;
SET CLIENT_MIN_MESSAGES = LOG;
SET auto_explain.log_min_duration = 0;
LOG:  statement: SET auto_explain.log_min_duration = 0;
CREATE TABLE t1 as select generate_series(1, 10*1000*1000);
LOG:  statement: CREATE TABLE t1 as select generate_series(1, 10*1000*1000);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'generate_series' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
LOG:  duration: 0.002 ms  plan:
Query Text: CREATE TABLE t1 as select generate_series(1, 10*1000*1000);
Redistribute Motion 1:3  (slice1; segments: 1)  (cost=0.00..5.01 rows=1000 width=0)
  Hash Key: (generate_series(1, 10000000))
  ->  Result  (cost=0.00..5.01 rows=334 width=0)
CREATE TABLE t2 (i int, j int);
LOG:  statement: CREATE TABLE t2 (i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT t3.i, t4.j FROM t2 as t3 join t2 as t4 on t3.i = t4.j;
LOG:  statement: SELECT t3.i, t4.j FROM t2 as t3 join t2 as t4 on t3.i = t4.j;
LOG:  duration: 3.712 ms  plan:
Query Text: SELECT t3.i, t4.j FROM t2 as t3 join t2 as t4 on t3.i = t4.j;
Gather Motion 3:1  (slice2; segments: 3)  (cost=2037.25..1005718.85 rows=7413210 width=8)
  ->  Hash Join  (cost=2037.25..1005718.85 rows=2471070 width=8)
        Hash Cond: (t4.j = t3.i)
        ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4)
              Hash Key: t4.j
              ->  Seq Scan on t2 t4  (cost=0.00..961.00 rows=28700 width=4)
        ->  Hash  (cost=961.00..961.00 rows=28700 width=4)
              ->  Seq Scan on t2 t3  (cost=0.00..961.00 rows=28700 width=4)
 i | j 
---+---
(0 rows)

DROP TABLE t1;
LOG:  statement: DROP TABLE t1;
DROP TABLE t2;
LOG:  statement: DROP TABLE t2;
SET auto_explain.log_min_duration = 1;
LOG:  statement: SET auto_explain.log_min_duration = 1;
CREATE TABLE t1 as select generate_series(1, 10*1000*1000);
LOG:  statement: CREATE TABLE t1 as select generate_series(1, 10*1000*1000);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'generate_series' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE t2 (i int, j int);
LOG:  statement: CREATE TABLE t2 (i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT t3.i, t4.j FROM t2 as t3 join t2 as t4 on t3.i = t4.j;
LOG:  statement: SELECT t3.i, t4.j FROM t2 as t3 join t2 as t4 on t3.i = t4.j;
LOG:  duration: 2.611 ms  plan:
Query Text: SELECT t3.i, t4.j FROM t2 as t3 join t2 as t4 on t3.i = t4.j;
Gather Motion 3:1  (slice2; segments: 3)  (cost=2037.25..1005718.85 rows=7413210 width=8)
  ->  Hash Join  (cost=2037.25..1005718.85 rows=2471070 width=8)
        Hash Cond: (t4.j = t3.i)
        ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..2683.00 rows=28700 width=4)
              Hash Key: t4.j
              ->  Seq Scan on t2 t4  (cost=0.00..961.00 rows=28700 width=4)
        ->  Hash  (cost=961.00..961.00 rows=28700 width=4)
              ->  Seq Scan on t2 t3  (cost=0.00..961.00 rows=28700 width=4)
 i | j 
---+---
(0 rows)

DROP TABLE t1;
LOG:  statement: DROP TABLE t1;
DROP TABLE t2;
LOG:  statement: DROP TABLE t2;
