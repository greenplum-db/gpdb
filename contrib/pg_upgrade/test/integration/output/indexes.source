-- disable sequential and index scan to force bitmap scan
SET ENABLE_SEQSCAN=OFF;
SET
SET ENABLE_INDEXSCAN=OFF;
SET

CREATE TABLE tbl_with_bpchar_pattern_ops_index(a int, b bpchar, c bpchar);
CREATE
CREATE INDEX bpchar_idx on tbl_with_bpchar_pattern_ops_index  (c, lower(b) bpchar_pattern_ops);
CREATE
INSERT INTO tbl_with_bpchar_pattern_ops_index SELECT i, (i%2)::bpchar, '1' FROM GENERATE_SERIES(1,20)i;
INSERT 20
ANALYZE tbl_with_bpchar_pattern_ops_index;
ANALYZE

EXPLAIN SELECT * FROM tbl_with_bpchar_pattern_ops_index WHERE c = '1' and lower(b)::bpchar LIKE '1';
 QUERY PLAN                                                                                        
---------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=300.36..303.56 rows=10 width=8)                   
   ->  Bitmap Heap Scan on tbl_with_bpchar_pattern_ops_index  (cost=300.36..303.56 rows=4 width=8) 
         Recheck Cond: c = '1'::bpchar                                                             
         Filter: lower(b::text)::bpchar ~~ '1'::text                                               
         ->  Bitmap Index Scan on bpchar_idx  (cost=0.00..300.36 rows=4 width=0)                   
               Index Cond: c = '1'::bpchar AND lower(b::text)::bpchar ~=~ '1'::bpchar              
 Settings:  enable_indexscan=off; enable_seqscan=off                                               
 Optimizer status: legacy query optimizer                                                          
(8 rows)
SELECT * FROM tbl_with_bpchar_pattern_ops_index WHERE c= '1' and lower(b)::bpchar LIKE '1';
 a  | b | c 
----+---+---
 1  | 1 | 1 
 13 | 1 | 1 
 15 | 1 | 1 
 17 | 1 | 1 
 3  | 1 | 1 
 5  | 1 | 1 
 7  | 1 | 1 
 19 | 1 | 1 
 9  | 1 | 1 
 11 | 1 | 1 
(10 rows)

CREATE TABLE tbl_with_bitmap_btree_indexes(a int, b int);
CREATE
CREATE INDEX bitmap_idx on tbl_with_bitmap_btree_indexes using bitmap(b);
CREATE
CREATE INDEX btree_idx on  tbl_with_bitmap_btree_indexes using btree(b);
CREATE
INSERT INTO tbl_with_bitmap_btree_indexes SELECT i,i%2 FROM generate_series(1,10)i;
INSERT 10
ANALYZE tbl_with_bitmap_btree_indexes;
ANALYZE

EXPLAIN SELECT * FROM tbl_with_bitmap_btree_indexes WHERE b = '1';
 QUERY PLAN                                                                                    
-----------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=300.29..303.36 rows=5 width=8)                
   ->  Bitmap Heap Scan on tbl_with_bitmap_btree_indexes  (cost=300.29..303.36 rows=2 width=8) 
         Recheck Cond: b = 1                                                                   
         ->  Bitmap Index Scan on btree_idx  (cost=0.00..300.29 rows=2 width=0)                
               Index Cond: b = 1                                                               
 Settings:  enable_indexscan=off; enable_seqscan=off                                           
 Optimizer status: legacy query optimizer                                                      
(7 rows)
SELECT * FROM tbl_with_bitmap_btree_indexes WHERE b = '1';
 a | b 
---+---
 9 | 1 
 1 | 1 
 3 | 1 
 5 | 1 
 7 | 1 
(5 rows)

-- enable btree index scan and disable bitmap scan
SET ENABLE_BITMAPSCAN=OFF;
SET
SET ENABLE_INDEXSCAN=ON;
SET
EXPLAIN SELECT * FROM tbl_with_bitmap_btree_indexes WHERE b = '1';
 QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..519.76 rows=5 width=8)                          
   ->  Index Scan using btree_idx on tbl_with_bitmap_btree_indexes  (cost=0.00..519.76 rows=2 width=8) 
         Index Cond: b = 1                                                                             
 Settings:  enable_bitmapscan=off; enable_indexscan=on; enable_seqscan=off                             
 Optimizer status: legacy query optimizer                                                              
(5 rows)
SELECT * FROM tbl_with_bitmap_btree_indexes WHERE b = '1';
 a | b 
---+---
 1 | 1 
 7 | 1 
 5 | 1 
 3 | 1 
 9 | 1 
(5 rows)

-- mark index as invalid
SET allow_system_table_mods='dml';
SET
UPDATE pg_index SET indisvalid = false WHERE indexrelid='btree_idx'::regclass;
UPDATE 1
RESET allow_system_table_mods;
RESET

! ./gpdb6/bin/pg_upgrade --mode=dispatcher --old-gp-dbid=1 --new-gp-dbid=1 --check --old-bindir=@upgrade_test_path@/gpdb5/bin --new-bindir=@upgrade_test_path@/gpdb6/bin --old-datadir=@upgrade_test_path@/gpdb5-data/qddir/demoDataDir-1 --new-datadir=@upgrade_test_path@/gpdb6-data/qddir/demoDataDir-1 --old-port=@old_port@;
Performing Consistency Checks on Old Live Server
------------------------------------------------
Checking for invalid indexes                                fatal

Your installation contains invalid indexes.  These indexes either 
need to be dropped or reindexed before proceeding to upgrade.
A list of invalid indexes is provided in the file:
	invalid_indexes.txt

Failure, exiting


! /bin/cat invalid_indexes.txt;
Database: upgradetest
  public.btree_idx on relation public.tbl_with_bitmap_btree_indexes


-- reindex to mark the index as valid
REINDEX INDEX btree_idx;
REINDEX
