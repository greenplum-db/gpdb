-- Tests for lz4 compression.
-- Check that callbacks are registered
SELECT * FROM pg_compression WHERE compname = 'lz4';
 compname |  compconstructor   |  compdestructor   | compcompressor  | compdecompressor  |  compvalidator   | compowner 
----------+--------------------+-------------------+-----------------+-------------------+------------------+-----------
 lz4      | gp_lz4_constructor | gp_lz4_destructor | gp_lz4_compress | gp_lz4_decompress | gp_lz4_validator |        10
(1 row)

CREATE TABLE lz4test (id int4, t text) WITH (appendonly=true, compresstype=lz4, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- Check that the reloptions on the table shows compression type
SELECT reloptions FROM pg_class WHERE relname = 'lz4test';
     reloptions     
--------------------
 {compresstype=lz4}
(1 row)

INSERT INTO lz4test SELECT g, 'foo' || g FROM generate_series(1, 100000) g;
INSERT INTO lz4test SELECT g, 'bar' || g FROM generate_series(1, 100000) g;
-- Check that we actually compressed data. With liblz4-1.9.4, the ratio is 1.59.
SELECT get_ao_compression_ratio('lz4test') IN (1.59);
 ?column? 
----------
 t
(1 row)

-- Check contents, at the beginning of the table and at the end.
SELECT * FROM lz4test ORDER BY (id, t) LIMIT 5;
 id |  t   
----+------
  1 | bar1
  1 | foo1
  2 | bar2
  2 | foo2
  3 | bar3
(5 rows)

SELECT * FROM lz4test ORDER BY (id, t) DESC LIMIT 5;
   id   |     t     
--------+-----------
 100000 | foo100000
 100000 | bar100000
  99999 | foo99999
  99999 | bar99999
  99998 | foo99998
(5 rows)

-- Test different compression levels:
CREATE TABLE lz4test_1 (id int4, t text) WITH (appendonly=true, compresstype=lz4, compresslevel=1);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE lz4test_9 (id int4, t text) WITH (appendonly=true, compresstype=lz4, compresslevel=9);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE lz4test_12 (id int4, t text) WITH (appendonly=true, compresstype=lz4, compresslevel=12);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO lz4test_1 SELECT g, 'foo' || g FROM generate_series(1, 10000) g;
INSERT INTO lz4test_1 SELECT g, 'bar' || g FROM generate_series(1, 10000) g;
SELECT * FROM lz4test_1 ORDER BY (id, t) LIMIT 5;
 id |  t   
----+------
  1 | bar1
  1 | foo1
  2 | bar2
  2 | foo2
  3 | bar3
(5 rows)

SELECT * FROM lz4test_1 ORDER BY (id, t) DESC LIMIT 5;
  id   |    t     
-------+----------
 10000 | foo10000
 10000 | bar10000
  9999 | foo9999
  9999 | bar9999
  9998 | foo9998
(5 rows)

INSERT INTO lz4test_9 SELECT g, 'foo' || g FROM generate_series(1, 10000) g;
INSERT INTO lz4test_9 SELECT g, 'bar' || g FROM generate_series(1, 10000) g;
SELECT * FROM lz4test_9 ORDER BY (id, t) LIMIT 5;
 id |  t   
----+------
  1 | bar1
  1 | foo1
  2 | bar2
  2 | foo2
  3 | bar3
(5 rows)

SELECT * FROM lz4test_9 ORDER BY (id, t) DESC LIMIT 5;
  id   |    t     
-------+----------
 10000 | foo10000
 10000 | bar10000
  9999 | foo9999
  9999 | bar9999
  9998 | foo9998
(5 rows)

-- Test the bounds of compresslevel. None of these are allowed.
CREATE TABLE lz4test_invalid (id int4) WITH (appendonly=true, compresstype=lz4, compresslevel=-1);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  value -1 out of bounds for option "compresslevel"
DETAIL:  Valid values are between "0" and "19".
CREATE TABLE lz4test_invalid (id int4) WITH (appendonly=true, compresstype=lz4, compresslevel=0);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  compresstype "lz4" can't be used with compresslevel 0
CREATE TABLE lz4test_invalid (id int4) WITH (appendonly=true, compresstype=lz4, compresslevel=13);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  compresslevel=13 is out of range for lz4 (should be in the range 1 to 12)
-- CREATE TABLE for heap table with compresstype=lz4 should fail
CREATE TABLE lz4test_heap (id int4, t text) WITH (compresstype=lz4);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ERROR:  unrecognized parameter "compresstype"
