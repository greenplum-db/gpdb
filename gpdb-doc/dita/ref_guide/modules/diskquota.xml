<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_gzw_2wz_13b">
  <title>diskquota</title>
  <body>
    <p>The diskquota module allows Greenplum Database administrators to limit the amount of disk
      space used by schemas or roles in a database. </p>
    <p>A Greenplum Database administrator sets disk space quotas for roles or schemas by executing
      the <codeph>set_role_quota()</codeph> or <codeph>set_schema_quota()</codeph> user-defined
      functions in the database. Diskquota processes running on the master and segment hosts check
      disk usage periodically and place schemas or roles on a blacklist when they reach their quota. </p>
    <p>When a query plan has been generated for a query that would add data, and the schema or role
      is on the blacklist, the query is cancelled before it can start. An error message reports the
      quota that has been exceeded. A query that does not add data, such as a simple
        <codeph>SELECT</codeph> query, is allowed to run even when the role or schema is on the
      blacklist.</p>
    <p>Diskquota enforces <i>soft limits</i> for disk usage. Quotas are only checked before a query
      executes. If the quota is not exceeded when the query is about to run, the query is allowed to
      run, even if it causes the quota to be exceeded. </p>
    <p>There is some delay after a quota has been reached before the schema or role is added to the
      blacklist. Other queries could add more data during the delay. The delay occurs because
      diskquota processes that calculate the disk space used by each table execute periodically with
      a pause between executions (two seconds by default). The delay also occurs when disk usage
      falls beneath a quota, due to operations such as <codeph>DROP</codeph>,
        <codeph>TRUNCATE</codeph>, or <codeph>VACUUM FULL</codeph> that remove data. Administrators
      can change the amount of time between disk space checks by setting the
        <codeph>diskquota.naptime</codeph> server configuration parameter.</p>
    <p>If a query is unable to run because the schema or role has been blacklisted, an administrator
      can increase the exceeded quota to allow the query to execute. The
        <codeph>show_fast_schema_quota_view</codeph> and <codeph>show_fast_role_quota_view</codeph>
      views can be used to find the schemas or roles that have exceeded their limits.</p>
  </body>
  <topic id="topic_ofb_gb1_b3b">
    <title>Installing diskquota</title>
    <body>
      <p>Perform the following steps to set up the diskquota module.</p>
      <ol id="ol_pfb_gb1_b3b">
        <li>Create the <codeph>diskquota</codeph> database. Diskquota uses this database to store
          the list of databases where the module is enabled.
          <codeblock>$ createdb diskquota;</codeblock></li>
        <li> Add the diskquota shared library to the <codeph>shared_preload_libraries</codeph>
          server configuration parameter and restart Greenplum
          Database.<codeblock>$ gpconfig -c shared_preload_libraries -v 'diskquota'
$ gpstop -ar</codeblock></li>
        <li> Register the diskquota extension in every database where you want to enforce disk usage
          quotas. For
          example:<codeblock>$ psql -d testdb -c "CREATE EXTENSION diskquota"
</codeblock></li>
        <li> If you create the diskquota extension in a non-empty database, you must initialize the
          table size data in the diskquota data model. Depending on the number of existing tables,
          this initialization step could take a very long time to complete.
          <codeblock>=# SELECT diskquota.init_table_size_table();</codeblock></li>
        <li> (Optional) Adjust the <codeph>diskquota.naptime</codeph> server configuration
          parameter. This parameter specifies how frequently (in seconds) to refresh the disk quota
          model. The smaller the <codeph>naptime</codeph> value, the less delay in detecting changes
          in disk usage. This example sets the <codeph>naptime</codeph> to ten seconds.
          <codeblock>$ gpconfig -c diskquota.naptime -v 10</codeblock></li>
        <li> (Optional) To stop enforcing disk usage quotas in a database, drop the diskquota
          extension in that database. This example disables diskquota in the <codeph>testdb</codeph>
          database. <codeblock>$ psql -d testdb
=# DROP EXTENSION diskquota;</codeblock></li>
      </ol>
    </body>
  </topic>
  <topic id="topic_qfb_gb1_b3b">
    <title>Using diskquota</title>
    <body>
      <p>A Greenplum Database superuser can set disk usage quotas for schemas and roles. A schema
        quota sets a limit on disk space used by all tables that belong to a schema. A role quota
        sets a limit on disk space used by all tables that are owned by a role.</p>
      <section>
        <title>Setting DIsk Quotas</title>
        <p>Use the <codeph>diskquota.set_schema_quota()</codeph> and
            <codeph>diskquota.set_role_quota()</codeph> user-defined functions to set, update, or
          delete disk quota limits for schemas and roles. The functions take two arguments: the
          schema or role name, and the quota to set. The quota can be specified in units of MB, GB,
          TB, or PB, for example '2TB'. </p>
        <p>The following example sets a 250GB quota for the <codeph>acct</codeph> schema:</p>
        <codeblock>$ SELECT diskquota.set_schema_quota('acct', '250GB');</codeblock>
        <p>This example sets a 500MB quota for the <codeph>nickd</codeph> role:</p>
        <codeblock>$ SELECT diskquota.set_role_quota(nickd, '500MB');</codeblock>
        <p>To change a quota, call the <codeph>diskquota.set_schema_quota()</codeph> or
            <codeph>diskquota.set_role_quota()</codeph> function again with the new quota value.</p>
        <p>To remove a quota, set the quota value to <codeph>'-1'</codeph>.</p>
      </section>
      <section><title>Displaying Disk Quotas and Disk Usage</title><p>Diskquota provides two views
          to display active quotas and the current computed disk space used.</p>The
          <codeph>diskquota.show_fast_schema_quota_view</codeph> view lists active quotas for
        schemas in the current database. The <codeph>nspsize_in_bytes</codeph> column contains the
        calculated size for all tables that belong to the schema.
          <codeblock>=# <b>SELECT * FROM diskquota.show_fast_schema_quota_view;</b>
 schema_name | schema_oid | quota_in_mb | nspsize_in_bytes
-------------+------------+-------------+------------------
 acct        |      16561 |      256000 |           131072
 analytics   |      16519 |  1073741824 |        144670720
 eng         |      16560 |     5242880 |        117833728
 public      |       2200 |         250 |          3014656
(4 rows)</codeblock><p>The
            <codeph>diskquota.show_fast_role_quota_view</codeph> view lists the active quotas for
          roles in the current database. The <codeph>rolsize_in_bytes</codeph> column contains the
          calculated size for all tables that are owned by the
        role.</p><codeblock>=# <b>SELECT * FROM diskquota.show_fast_role_quota_view;</b>
 role_name | role_oid | quota_in_mb | rolsize_in_bytes
-----------+----------+-------------+------------------
 mdach     |    16558 |         500 |           131072
 adam      |    16557 |         300 |        117833728
 nickd     |    16577 |         500 |        144670720
(3 rows)</codeblock></section>
      <section><title>Setting the Delay Between Disk Usage Updates</title>The Greenplum Database
          <codeph>diskquota.naptime</codeph> server configuration parameter specifies how frequently
        (in seconds) the table sizes are recalculated. The smaller the <codeph>naptime</codeph>
        value, the less delay in detecting changes in disk usage. This example sets the
          <codeph>naptime</codeph> to ten seconds.
        <codeblock>$ gpconfig -c diskquota.naptime -v 10</codeblock></section>
    </body>
  </topic>
<!--
  <topic id="topic_ifb_gb1_b3b">
    <title>Diskquota Architecture</title>
    <body>
      <p>Diskquota has four parts.</p>
      <parml id="ol_jfb_gb1_b3b">
        <plentry>
          <pt>Quota Status Checker</pt>
          <pd>Maintains the diskquota data model, calculates schemas and roles that have reached
            their quotas.</pd>
        </plentry>
        <plentry>
          <pt>Quota Change Detector</pt>
          <pd>Detects changes in disk spaced used resulting from operations such as
              <codeph>INSERT</codeph>, <codeph>COPY</codeph>, <codeph>DROP</codeph>, or
              <codeph>VACUUM FULL</codeph>. It reports active tables to the Quota Status
            Checker.</pd>
        </plentry>
        <plentry>
          <pt>Quota Enforcement Operator</pt>
          <pd>Cancels queries that would load data if the schema or role is on the blacklist.</pd>
        </plentry>
        <plentry>
          <pt>Quota Setting Store</pt>
          <pd>Stores the user-defined quota limits for schemas and roles.</pd>
        </plentry>
      </parml>
      <image href="../../graphics/GPdiskquota.png" id="image_ydk_yp1_b3b" scalefit="yes"/>
      <section id="topic_kfb_gb1_b3b">
        <title>Quota Status Checker</title>
        <p>The Quota Status Checker uses the Postgres background worker framework. There are two
          kinds of background workers: launcher and worker. Both launcher and worker processes run
          on the Greenplum Database master node. </p>
        <p>The launcher manages a worker process for each database. There is only one launcher
          process per database cluster.</p>
        <p>Worker processes use SPI functions to communicate with the segment nodes. A worker
          process for each database monitors the disk space usage for schemas and roles in the
          database. The worker periodically recalculates the sizes of active tables, updates the
          diskquota data model with new table sizes, and then compares the updated disk usage with
          the quotas defined for those schemas or roles. If a quota is exceeded, the worker adds the
          schema or role to a blacklist in shared memory. The blacklist is used to determine if a
          query should be cancelled or allowed to execute.</p>
      </section>
      <section id="topic_lfb_gb1_b3b">
        <title>Quota Change Detector</title>
        <p>The Quota Change Detector is implemented with hook functions that run when disk file size
          changes. If pages are added or removed from a table, the table is reported to Quota Status
          Checker so that the table size can be recalculated. </p>
      </section>
      <section id="topic_mfb_gb1_b3b">
        <title>Quota Enforcement Operator</title>
        <p>The Quota Enforcement Operator is called after the planner has generated a plan for the
          query, but before the query runs. The operator is also implemented using hook functions,
          which check whether the corresponding schema or role is in the diskquota blacklist.</p>
      </section>
      <section id="topic_nfb_gb1_b3b">
        <title>Quota Setting Store</title>
        <p>Each database stores and manages its own disk quota configuration. The quotas for schemas
          and roles are stored in the <codeph>diskquota.quota_config</codeph> table in each
          monitored database. Although role is a database object at the cluster level, diskquota
          limits for roles are set per database. That is, a role can have different quotas in
          different databases.</p>
      </section>
    </body>
  </topic>
-->
  <topic id="topic_sfb_gb1_b3b">
    <title>Notes</title>
    <body>
      <p>If you create the diskquota extension in a database that already contains data, run the
          <codeph>diskquota.init_table_size_table()</codeph> UDF to initialize the table size data
        in the diskquota schema. This UDF calculates the disk size for all the tables in the
        database. If the databse has millions of tables with hundreds of columns, this procedure can
        take a long time. The diskquota module will not work until the UDF has finished.</p>
      <p>The diskquota extension can be enabled in up to ten databases. One diskquota worker process
        is created on the Greenplum Database master host for each diskquota-enabled database.</p>
      <p>The disk usage for a role is defined as the total of disk usage on all segments for all
        tables the role owns. Although role is a cluster-level database object, the disk usage for
        roles is calculated separately for each database. </p>
      <p>The disk usage of a schema is defined as the total of disk usage on all segments for all
        tables in the schema. </p>
      <p>The disk usage for a table includes the table data, indexes, toast tables, and free space
        map. For append-optimized tables, the calculation includes the visibility map and index, and
        the block directory table.</p>
      <p>Diskquota cannot detect a newly created table inside of an uncommited transaction. The size
        of the new table is not included in the disk usage calculated for the corresponding schema
        and role until after the transaction has committed. Similarly, a table created using the
          <codeph>CREATE TABLE AS</codeph> command is not included in disk usage statistics until
        the command has completed.</p>
      <p>Diskquota supports high availability features provided by the background worker framework.
        The diskquota launcher process only runs on the active master node. The postmaster on the
        standby master does not start the diskquota launcher process when it is in standby mode.
        When the master is down and the administrator runs the  <codeph><xref
            href="../../utility_guide/admin_utilities/gpactivatestandby.xml#topic1"/></codeph>
        command, the standby master changes its role to master and the diskquota launcher process is
        forked automatically. Using the diskquota-enabled database list in the
          <codeph>diskquota</codeph> database, the diskquota launcher creates the diskquota worker
        processes that manage disk quotas for each database.</p>
    </body>
  </topic>
  <topic id="topic_v2z_jrv_b3b">
    <title>Examples</title>
    <body>
      <p>This example demonstrates how to set up a schema quota and then observe diskquota behavior
        as data is added to the schema.</p>
      <ol id="ol_rfb_gb1_b3b">
        <li>Create a database named <codeph>test</codeph> and log in to
          it.<codeblock>$ <b>createdb test</b>
$ <b>psql -d test</b></codeblock></li>
        <li>Create the diskquota extension in the
          database.<codeblock>=# <b>CREATE EXTENSION diskquota;</b>
CREATE EXTENSION</codeblock></li>
        <li> Create the <codeph>s1</codeph>
          schema.<codeblock>=# <b>CREATE SCHEMA s1;</b>
CREATE SCHEMA</codeblock></li>
        <li>Set a 1MB disk quota for the <codeph>s1</codeph>
          schema.<codeblock>=# <b>SELECT diskquota.set_schema_quota('s1', '1MB');</b>
 set_schema_quota
------------------

(1 row)</codeblock></li>
        <li>The following commands create a table in the <codeph>s1</codeph> schema and insert a
          small amount of data into it. The schema has no data yet, so it is not on the blacklist.
          <codeblock>=# <b>SET search_path TO s1;
SET
</b>=# <b>CREATE TABLE a(i int);</b>
CREATE TABLE
=# <b>INSERT INTO a SELECT generate_series(1,100);</b>
INSERT 0 100
</codeblock></li>
        <li>This command inserts a large amount of data, enough to exceed the 1MB quota that was set
          for the schema. Before the <codeph>INSERT</codeph> command, the <codeph>s1</codeph> schema
          is still not on the blacklist, so this command should be allowed to run, even though it
          will exceed the limit set for the
          schema.<codeblock>=# <b>INSERT INTO a SELECT generate_series(1,10000000);</b>
INSERT 0 10000000
</codeblock></li>
        <li>This command attempts to insert a small amount of data. Because the previous command
          exceeded the schema's disk quota limit, the schema should be blacklisted and any data
          loading command should be cancelled.
          <codeblock>=# <b>INSERT INTO a SELECT generate_series(1,100);</b>
ERROR:  schema's disk space quota exceeded with name:s1
</codeblock></li>
        <li>This command removes the quota from the <codeph>s1</codeph> schema by setting it to
            <codeph>-1</codeph> and again inserts a small amount of data. A 5-second sleep before
          the <codeph>INSERT</codeph> command ensures that the diskquota table size data is updated
          before the command is
          run.<codeblock>=# <b>SELECT diskquota.set_schema_quota('s1', '-1');</b>
 set_schema_quota
------------------

(1 row)
# Wait for 5 seconds to ensure the blacklist is updated
#= <b>SELECT pg_sleep(5);</b>
#= <b>INSERT INTO a SELECT generate_series(1,100);</b>
INSERT 0 100
</codeblock></li>
      </ol>
    </body>
  </topic>
</topic>
