<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pz212122">PL/Container Language</title>
  <body>
    <p>This section includes the following information about PL/Container 1.1 and later:</p>
    <ul>
      <li id="pz219023"><xref href="#about_pl_container" type="topic" format="dita"/></li>
      <li id="pz213664" otherprops="pivotal"><xref href="#topic3" type="topic" format="dita"/></li>
      <li><xref href="#upgrade_plcontainer" type="topic" format="dita"/></li>
      <li id="pz213668"><xref href="#uninstall_plcontainer" type="topic" format="dita"/>
      </li>
      <li><xref href="#topic_kds_plk_rbb" format="dita"/></li>
    </ul>
    <p>The PL/Container language extension is available as an open source module. For information
      about the module, see the README file in the GitHub repository at <xref
        href="https://github.com/greenplum-db/plcontainer" format="html" scope="external"
        >https://github.com/greenplum-db/plcontainer</xref>.</p>
  </body>
  <topic id="about_pl_container" xml:lang="en">
    <title>About PL/Container Language Extension</title>
    <body>
      <p>The Greenplum Database PL/Container language extension allows users to create and run
        Python or R user-defined functions (UDFs) securely, inside a Docker container. A Docker
          <i>container</i> is a Linux process that runs in a managed way by using Linux kernel
        features such as cgroups, namespaces and union file systems. For information about Docker,
        see the Docker web site <xref href="https://www.docker.com/" format="html" scope="external"
          >https://www.docker.com/</xref>. </p>
      <p>The Greenplum supported procedural languages, PL/Python and PL/R, allow only Greenplum
        Database administrators to create any UDF, due to their untrusted nature. This limits the
        convenience of data scientists using their functions for training and debugging models.
        PL/Container allows the sandboxing of  PL/Python and PL/R execution inside a Docker
        container. </p>
      <p>Running the UDFs inside the Docker container ensures:</p>
      <ul>
        <li>Isolation of the execution process in a separate environment which enables the
          decoupling of data processing.  SQL operators such as "scan," "filter," and "project" are
          executed at query executor side, and advanced data analysis is executed at container side. </li>
        <li>the user code cannot access the OS or the file system of the local host,</li>
        <li>the code cannot introduce any security risks,</li>
        <li>the functions cannot connect back to the Greenplum Database if the container is started with limited or no network access</li>
        <li>the user functions cannot open any unsecure external connections.</li>
      </ul>
      
      <section id="plcontainer_arch">
        <title>PL/Container Architecture</title>
        
        <fig id="pl_container_image">
          <image placement="break" href="graphics/pl_container_architecture.png" width="650"
            height="550" align="center"/>
        </fig>
        
        <p>Consider a query that selects table data using all available
          segments, and transforms the data using a PL/Container function. In this
          case, the query executor on master, on the first call to a function in a segment container, starts the container on that segment host. 
          It then contacts the running container to obtain the results. The container might respond with an SPI - SQL query executed by the container to
          get some data back from the database - returning the result to the query executor.</p>
        <p>A container running in standby mode waits on the socket and does not consume any CPU
          resources. PL/Container memory consumption depends on the amount of data cached in global
          dictionaries.</p>
        <p>By closing the Greenplum Database session that started the container, the container
          connection is closed, and the container shuts down.</p>
        
      </section>
    </body>
  </topic>
  
  <topic id="topic3" xml:lang="en">
    <title id="pz214493">Install PL/Container </title>
    
    <body>
    <section>In order to use PL/Container, you need to: <ul>
          <li>install Docker on all hosts,</li>
          <li>install the PL/Container utility,</li>
          <li>install the PL/Container R or Python images.</li>
        </ul><p>In the following sections we describe each one of these tasks in detail.</p>
      </section>
      
    <section id="requirements">
          <title>Prerequisites</title>
      
        <ol>
          <li>For PL/Container 1.x and 2.0.x use Greenplum Database 5.2.x and later on Red Hat
            Enterprise Linux (RHEL) 7.x (or later) and CentOS 7.x (or later). </li>
          <li>For PL/Container 2.1.0 and later use Greenplum Database 6 on CentOS 7.x (or later),
            RHEL 7.x (or later), or Ubuntu 18.04. <note>PL/Container 2.1.0 and later supports Docker
              images with Python 3 installed.</note></li>
          <li>The minimum Linux OS kernel version supported is 3.10. To verfiy your kernel release:
            <codeblock>$ uname -r</codeblock>
          </li>
          <li>The minimum Docker versions on all hosts need to be: <ul id="ul_z2t_bxd_rbb">
              <li>For PL/Container 1.x or 2.0.x on RHEL or CentOS 7.x - Docker 17.05</li>
              <li>
                <p>For PL/Container 2.1.x on CentOS or RHEL 7.x, or Ubuntu 18.04 - Docker 19.03</p>
              </li>
            </ul></li>
          <li>On each Greenplum Database host, the <codeph>gpadmin</codeph> user should be part of
            the <codeph>docker</codeph> group for the user to be able to manage Docker images and
            containers.</li>
        </ol>
      
    </section>
    
    <section id="topic_ydt_rtc_rbb">
        <title>Install Docker</title>
        <p>To use PL/Container install Docker on all Greenplum Database host systems. The these
          instructions show how to set up the Docker service on CentOS 7 but RHEL 7 is a similar
          process.</p>
        <p>These steps install the docker package and start the Docker service as a user with sudo
          privileges. </p>
        <ol>
          <li>The CentOS <codeph>extras</codeph> repository is accessible.</li>
          <li>The user has sudo privileges or is root.</li>
          <li>Install dependencies required for
            Docker<codeblock>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</codeblock></li>
          <li>Add the Docker
            repo<codeblock>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</codeblock></li>
          <li>Update yum cache<codeblock>sudo yum makecache fast</codeblock></li>
          <li>Install Docker<codeblock>sudo yum -y install docker-ce</codeblock></li>
          <li>Start Docker daemon.<codeblock>sudo systemctl start docker</codeblock></li>
          <li>Assign the Greenplum Database administrator <codeph>gpadmin</codeph> to the group
            docker, to give access to the Docker daemon and docker commands:
            <codeblock>sudo usermod -aG docker gpadmin</codeblock></li>
          <li>Exit the session and login again to update the privileges.</li>
          <li>Configure Docker to start when the host system
            starts.<codeblock>sudo systemctl enable docker.service</codeblock><codeblock>sudo systemctl start docker.service</codeblock></li>
          <li>Run a Docker command to test the Docker installation. This command lists the currently
            running Docker containers. <codeblock>docker ps</codeblock></li>
          <li>After you install Docker on all Greenplum Database hosts, restart the Greenplum
            Database system to give Greenplum Database access to Docker.
            <codeblock>gpstop -ra</codeblock></li>
          <li>On each Greenplum Database host, the gpadmin user is part of the docker group to
            manage Docker images and containers. </li>
        </ol>
        <p>See also the Docker site installation instructions for CentOS <xref
            href="https://docs.docker.com/engine/installation/linux/centos/" format="html"
            scope="external">https://docs.docker.com/engine/installation/linux/centos/</xref>. For a
          list of Docker commands, see the Docker engine Run Reference <xref
            href="https://docs.docker.com/engine/reference/run/" format="html" scope="external"
            >https://docs.docker.com/engine/reference/run/</xref>.</p>
      </section>
      
    <section id="topic_ifk_2tr_dw" otherprops="pivotal">
      <title>Install PL/Container </title>
      <!--Pivotal content-->
      
        <p>Install the PL/Container language extension using the <codeph>gppkg</codeph> utility
          (PL/Container 1.1 and later).</p>
        <ol id="ul_w5b_nzp_dw">
          <li>Download the PL/Container package version that applies to your Greenplum Database
            version, from <xref href="https://network.pivotal.io" format="html" scope="external"
              >Pivotal Network</xref>. PL/Container is listed under Greenplum Database Language
            extensions.  </li>
          <li>As <codeph>gpadmin</codeph>, copy the PL/Container language extension package to the
            master host.</li>
          <li>Make sure Greenplum Database is up and running:<codeblock>gpstate -s</codeblock>If
            it's not, bring it up with this command.<codeblock>gpstart -a</codeblock></li>
          <li>Run the package installation
            command.<codeblock>gppkg -i plcontainer-2.1.0-rhel7-x86_64.gppkg</codeblock></li>
          <li>Source the file
            <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>source $GPHOME/greenplum_path.sh</codeblock></li>
          <li>Restart Greenplum Database.<codeblock>gpstop -ra</codeblock></li>
          <li>Login into one of the available databases, for example, postgres:
            <codeblock>psql postgres;</codeblock></li>
          <li>Register the PL/Container extension, which installs the <codeph>plcontainer</codeph>
            utility and creates PL/Container-specific functions and
            views:<codeblock>CREATE EXTENSION plcontainer; </codeblock>For PL/Container 1.0, the
            command
            is:<codeblock>psql -d <varname>your_database</varname> -f $GPHOME/share/postgresql/plcontainer/plcontainer_install.sql</codeblock></li>
        </ol>
        <p>Now, using the <codeph>plcontainer</codeph> utility you can manage Docker images and the
          PL/Container configuration. </p>
      
    </section>
    
    <section id="topic_qcr_bfk_rbb">
        <title>Install PL/Container Docker Images</title>
        <!--oss only content-->
        <p otherprops="oss-only">The PL/Container open source module contains dockerfiles to build
          Docker images that can be used with PL/Container. You can build a Docker image to run
          PL/Python UDFs and a Docker image to run PL/R UDFs. See the dockerfiles in the GitHub
          repository at <xref href="https://github.com/greenplum-db/plcontainer" format="html"
            scope="external">https://github.com/greenplum-db/plcontainer</xref>.</p>
        <!--Pivotal content-->
        <ul id="ul_h5t_sbz_vkb">
          <li>Download the images. Download the tar.gz files that contains the Docker images from
              <i>Pivotal Network</i>. For example, for Greenplum 5.24: <ul id="ul_gbj_wbz_vkb">
              <li>PL/Container Docker Image <b>for R</b> 1.5.0 with file name
                  <b>plcontainer-r-images-1.5.0.tar.gz</b>, which includes Python 2.7.12 and the
                  <i>Python Data Science Module Package</i>. </li>
              <li>PL/Container Docker Image <b>for Python</b> 1.5.0 with file name
                  <b>plcontainer-python-images-1.5.0.tar.gz </b>which includes Python 2.7.12 and the
                  <i>Python Data Science Module Package</i>. </li>
            </ul><p>If you require different images from the ones provided by Pivotal, you can
              create custom Docker images, install the image and add the image to the PL/ Container
              configuration. </p></li>
          <li>
            <p>Use the already installed <codeph>plcontainer </codeph> utility to install the
              downloaded Docker images on all Greenplum Database hosts, using <codeph>image-add
                -f</codeph>, where <codeph>-f </codeph>indicates the location of the downloaded
              files: </p>
            <codeblock># Install a Python 2 based Docker image
            plcontainer image-add -f /home/gpadmin/plcontainer-python-image-2.1.0-gp6.tar.gz
            
            # Install a Python 3 based Docker image
            plcontainer image-add -f /home/gpadmin/plcontainer-python3-image-2.1.0-gp6.tar.gz
            
            # Install an R based Docker image
            plcontainer image-add -f /home/gpadmin/plcontainer-r-image-2.1.0-gp6.tar.gz</codeblock>
            <p>The utility displays progress information as it installs the Docker image on the
              Greenplum Database hosts, similar to:</p>
            <codeblock>20200127:21:54:43:004607 plcontainer:mdw:gpadmin-[INFO]:-Checking whether docker is installed on all hosts...
20200127:21:54:43:004607 plcontainer:mdw:gpadmin-[INFO]:-Distributing image file /home/gpadmin/plcontainer-python-images-1.5.0.tar to all hosts...
20200127:21:54:55:004607 plcontainer:mdw:gpadmin-[INFO]:-Loading image on all hosts...
20200127:21:55:37:004607 plcontainer:mdw:gpadmin-[INFO]:-Removing temporary image files on all hosts...</codeblock>
            <p>For more information on the <codeph>image-add</codeph> options, visit the <xref
                href="plcontainer_ref.xml#topic_rw3_52s_dw">plcontainer utility reference</xref>
              page. </p>
          </li>
          <li>Use <codeph>plcontainer image-list </codeph> to display the installed Docker images on
            the local host and identify the IDs that you’ll insert in the
              <codeph>runtime-add</codeph> command.
              <codeblock>$ plcontainer image-list</codeblock><simpletable frame="all"
              relcolwidth="1.0* 1.0* 1.0* 1.0*" id="simpletable_xqr_cdz_vkb">
              <sthead>
                <stentry>REPOSITORY</stentry>
                <stentry>TAG</stentry>
                <stentry>IMAGE ID</stentry>
                <stentry>CREATED</stentry>
              </sthead>
              <strow>
                <stentry> pivotaldata/plcontainer_r_shared</stentry>
                <stentry>devel</stentry>
                <stentry>7427f920669d</stentry>
                <stentry>10 months ago</stentry>
              </strow>
              <strow>
                <stentry> pivotaldata/plcontainer_python_shared</stentry>
                <stentry>devel</stentry>
                <stentry>e36827eba53e</stentry>
                <stentry>10 months ago</stentry>
              </strow>
              <strow>
                <stentry> pivotaldata/plcontainer_python3_shared</stentry>
                <stentry>devel</stentry>
                <stentry>y32827ebe55b</stentry>
                <stentry>5 months ago</stentry>
              </strow>
            </simpletable></li>
          <li><p>To allow PL/Container to access the Docker images, use the <codeph>plcontainer
                runtime-add</codeph> command to add the image information to the PL/Container
              configuration file. The configuration file information allows PL/Container to create
              Docker containers with specified Docker images. </p><p>The <codeph>-r</codeph> option
              specifies the runtime ID and the <codeph>-l</codeph> option specifies the language
              that is contained in the Docker image.
              <codeblock># Add a Python 2 based runtime
            plcontainer runtime-add -r e36827eba53e -i pivotaldata/plcontainer_python_shared:devel -l python
            
            # Add a Python 3 based runtime that is supported with PL/Container 2.1.0 and later
            plcontainer runtime-add -r y32827ebe55b -i pivotaldata/plcontainer_python3_shared:devel -l python3
            
            # Add an R based runtime
            plcontainer runtime-add -r 7427f920669d -i pivotaldata/plcontainer_r_shared:devel -l r</codeblock></p>The
            utility displays progress information as it updates the PL/Container configuration file
            on the Greenplum Database instances. <p>For details on the runtime-add options, see
                <xref href="plcontainer_ref.xml" format="html" scope="peer"><i>The plcontainer
                  Utility</i></xref>reference page. </p></li>
          <li>From PL/Container 1.2.0, you can use Greenplum Database resource groups to manage and
            limit the total CPU and memory resources of containers in PL/Container runtimes.  In
            this example, <codeph>-s</codeph> specifies a preconfigured resource group 16391, to be
            used for the python
              runtime.<codeblock>plcontainer runtime-add -r e36827eba53e -i pivotaldata/plcontainer_python_shared:devel -l
      python -s resource_group_id=16391</codeblock><p>For
              more information about enabling, configuring, and using Greenplum Database resource
              groups with PL/Container, see <xref href="pl_container_using.xml" scope="peer"
                >PL/Container Resource Management </xref>topic. </p><p>You can view the PL/Container
              configuration information with the <codeph>plcontainer runtime-show -r
                &lt;runtime_id></codeph> command. You can view the PL/Container configuration XML
              file with the <codeph>plcontainer runtime-edit</codeph> command. </p></li>
        </ul>
        <p>You have now installed the PL/Container utility, with the related Docker images. Next
          step is to create UDFs that are using the specific containers and docker images. See  </p>
      </section>
     
    </body>
 </topic>
  
    <topic id="upgrade_plcontainer">
      <title>Upgrade PL/Container</title>
      <body>
      <p>To upgrade PL/Container, follow the steps described below.</p>
      <ul>
        <li>Pivotal only You cannot upgrade from version 1.0 to 1.1 or later with the gppkg utility
          -u option.</li>
        <li>You uninstall version 1.0 and install the new version.</li>
      </ul>
      <section>
        <title>Upgrade from PL/Container 1.0</title>
        <p>To upgrade to PL/Container 1.1 or later, uninstall version 1.0 and install the new
          version. You cannot use the <codeph>gppkg</codeph> option <codeph>-u</codeph>. The
            <codeph>gppkg</codeph> utility installs PL/Container 1.1 and later as a Greenplum
          Database extension, while PL/Container 1.0 is installed as a Greenplum Database language.
          The Docker images and the PL/Container configuration do not change when upgrading
          PL/Container, only the PL/Container extension installation changes.</p>
        <p>As part of the upgrade process, you must drop PL/Container from all databases that are
          configured with PL/Container.</p>
        <note type="important">Dropping PL/Container from a database drops all PL/Container UDFs
          from the database, including user-created PL/Container UDFs. If the UDFs are required,
          ensure you can re-create the UDFs before dropping PL/Container. This
            <codeph>SELECT</codeph> command lists the names of and body of PL/Container UDFs in a
            database.<codeblock>SELECT proname, prosrc FROM pg_proc WHERE prolang = (SELECT oid FROM pg_language WHERE lanname = 'plcontainer');</codeblock><p>For
            information about the catalog tables, <codeph>pg_proc</codeph> and
              <codeph>pg_language</codeph>, see <xref
              href="../ref_guide/system_catalogs/catalog_ref-tables.xml" format="dita" scope="peer"
              >System Tables</xref>. </p></note>
        <p>These steps upgrade from PL/Container 1.0 to PL/Container 1.1 or later in a database. The
          steps save the PL/Container 1.0 configuration and restore the configuration for use with
          PL/Container 1.1 or later.<ol id="ol_j1j_bml_vkb">
            <li>Save the PL/Container configuration. This example saves the configuration to
                <codeph>plcontainer10-backup.xml</codeph> in the local
              directory.<codeblock>plcontainer runtime-backup -f plcontainer10-backup.xml</codeblock></li>
            <li>Remove any <codeph>setting</codeph> elements that contain the
                <codeph>use_container_network</codeph> attribute from the configuration file. For
              example, this <codeph>setting</codeph> element must be removed from the configuration
              file.<codeblock>&lt;setting use_container_network="yes"/></codeblock></li>
            <li>Run the <codeph>plcontainer_uninstall.sql</codeph> script as the
                <codeph>gpadmin</codeph> user for each database that is configured with
              PL/Container. For example, this command drops the <codeph>plcontainer</codeph>
              language in the <codeph>mytest</codeph> database.
                <codeblock>psql -d mytest -f $GPHOME/share/postgresql/plcontainer/plcontainer_uninstall.sql</codeblock><p>The
                script drops the <codeph>plcontainer</codeph> language with the
                  <codeph>CASCADE</codeph> clause that drops PL/Container-specific functions and
                views in the database. </p></li>
            <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the
                <codeph>-r</codeph> option to uninstall the PL/Container language extension. This
              example uninstalls the PL/Container language extension on a Linux
              system.<codeblock>$ gppkg -r plcontainer-1.0.0</codeblock></li>
            <li>Run the package installation command. This example installs the PL/Container 2.1.0
              language extension on a Linux
              system.<codeblock>gppkg -i plcontainer-2.1.0-gp6-rhel7_x86_64.gppkg</codeblock></li>
            <li>Source the file
              <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>source $GPHOME/greenplum_path.sh</codeblock></li>
            <li>Update the PL/Container configuration. This command restores the saved
              configuration.<codeblock>plcontainer runtime-restore -f plcontainer10-backup.xml</codeblock></li>
            <li>Restart Greenplum Database.<codeblock>gpstop -ra</codeblock></li>
            <li>Register the new PL/Container extension as an extension for each database that uses
              PL/Container UDFs. This <codeph>psql</codeph> command runs a <codeph>CREATE
                EXTENSION</codeph> command to register PL/Container in the database
                <codeph>mytest</codeph>.
                <codeblock>psql -d mytest -c 'CREATE EXTENSION plcontainer;'</codeblock><p>The
                command registers PL/Container as an extension and creates PL/Container-specific
                functions and views.</p></li>
          </ol></p>
        <p>After upgrading PL/Container for a database, re-install any user-created PL/Container
          UDFs that are required.</p>
      </section>
      <section>
        <title>Upgrade from PL/Container 1.1</title>
        <p>To upgrade from PL/Container 1.1 or higher, you save the current configuration, upgrade
          PL/Container, and then restore the configuration after upgrade. There is no need to update
          the Docker images when you upgrade PL/Container.</p>
        <note>Before you perform this upgrade procedure, ensure that you have migrated your
          PL/Container 1.1 package from your previous Greenplum Database installation to your new
          Greenplum Database installation. Refer to the <xref
            href="../utility_guide/ref/gppkg.xml#topic1" format="dita" scope="peer">gppkg</xref>
          command for package installation and migration information.</note>
        <p>Perform the following procedure to upgrade from PL/Container 1.1 to PL/Container version
          1.2 or later.<ol id="ol_l1j_bml_vkb">
            <li>Save the PL/Container configuration. For example, to save the configuration to a
              file named <codeph>plcontainer110-backup.xml</codeph> in the local
              directory:<codeblock>$ plcontainer runtime-backup -f plcontainer110-backup.xml</codeblock></li>
            <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the
                <codeph>-u</codeph> option to update the PL/Container language extension. For
              example, the following command updates the PL/Container language extension to version
              2.1.0 on a Linux
              system:<codeblock>$ gppkg -u plcontainer-2.1.0-gp6-rhel7_x86_64.gppkg</codeblock></li>
            <li>Source the Greenplum Database environment file
                <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>$ source $GPHOME/greenplum_path.sh</codeblock></li>
            <li>Restore the PL/Container configuration. For example, this command restores the
              PL/Container configuration that you saved in a previous step:
              <codeblock>$ plcontainer runtime-restore -f plcontainer110-backup.xml</codeblock></li>
            <li>Restart Greenplum Database.<codeblock>$ gpstop -ra</codeblock></li>
            <li>You do not need to re-register the PL/Container extension in the databases in which
              you previously created the extension. You must register the PL/Container extension in
              each new database that will run PL/Container UDFs. For example, the following command
              registers PL/Container in a database named <codeph>mytest</codeph>:
                <codeblock>$ psql -d mytest -c 'CREATE EXTENSION plcontainer;'</codeblock><p>The
                command also creates PL/Container-specific functions and views.</p></li>
          </ol></p>
        <note>PL/Container 1.2 and later utilizes the new resource group capabilities introduced in
          Greenplum Database 5.8.0. If you downgrade to a Greenplum Database system that uses
          PL/Container 1.1. or earlier, you must use <codeph>plcontainer runtime-edit</codeph> to
          remove any <codeph>resource_group_id</codeph> settings from your PL/Container runtime
          configuration.</note>
      </section>
    </body>
    </topic>

  
  <topic id="uninstall_plcontainer" xml:lang="en">
    <title id="pz213704">Uninstall PL/Container</title>
    <body>
      <p>To uninstall PL/Container, remove Docker containers and images, and then remove the
        PL/Container support from Greenplum Database.</p>
      <p>When you remove support for PL/Container, the <codeph>plcontainer</codeph> user-defined
        functions that you created in the database will no longer work. </p>
    </body>
    <topic id="topic_rnb_4s5_lw">
      <title>Uninstall Docker Containers and Images</title>
      <body>
        <p>On the Greenplum Database hosts, uninstall the Docker containers and images that are no
          longer required. </p>
        <p>The <codeph>plcontainer image-list</codeph> command lists the Docker images that are
          installed on the local Greenplum Database host. </p>
        <p>The <codeph>plcontainer image-delete</codeph> command deletes a specified Docker image
          from all Greenplum Database hosts. </p>
        <p>Some Docker containers might exist on a host if the containers were not managed by
          PL/Container. You might need to remove the containers with Docker commands. These
            <codeph>docker</codeph> commands manage Docker containers and images on a local host.<ul
            id="ul_emd_ts5_lw">
            <li>The command <codeph>docker ps -a</codeph> lists all containers on a host. The
              command <codeph>docker stop</codeph> stops a container.</li>
            <li>The command <codeph>docker images</codeph> lists the images on a host.</li>
            <li>The command <codeph>docker rmi</codeph> removes images.</li>
            <li>The command <codeph>docker rm</codeph> removes containers. </li>
          </ul></p>
      </body>
    </topic>
    <topic xml:lang="en" id="topic_qnb_3cj_kw">
      <title>Remove PL/Container Support for a Database</title>
      <body>
        <p>To remove support for PL/Container,  drop the extension from the database. Use the
            <codeph>psql</codeph> utility with <codeph>DROP EXTENION</codeph> command (using
            <codeph>-c</codeph>) to remove PL/Container from <codeph>mytest</codeph> database.</p>
        <codeblock>psql -d mytest -c 'DROP EXTENSION plcontainer CASCADE;'</codeblock>
        <p>The <codeph>CASCADE</codeph> keyword drops PL/Container-specific functions and views.</p>
      </body>
    </topic>
    <topic xml:lang="en" id="topic_dty_fcj_kw" otherprops="pivotal">
      <title>Uninstall PL/Container Language Extension</title>
      <body>
        <p>If no databases have <codeph>plcontainer</codeph> as a registered language, uninstall the
          Greenplum Database PL/Container language extension with the <codeph>gppkg</codeph>
          utility. </p>
        <ol id="ol_ety_fcj_kw">
          <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the <codeph>-r</codeph>
            option to uninstall the PL/Container language extension. This example uninstalls the
            PL/Container language extension on a Linux
              system:<codeblock>$ gppkg -r plcontainer-2.1.0</codeblock><p>You can run the
                <codeph>gppkg</codeph> utility with the options <codeph>-q --all</codeph> to list
              the installed extensions and their versions.</p></li>
          <li>Reload
            <codeph>greenplum_path.sh</codeph>.<codeblock>$ source $GPHOME/greenplum_path.sh</codeblock></li>
          <li>Restart the database.<codeblock>$ gpstop -ra</codeblock></li>
        </ol>
      </body>
    </topic>
  </topic>  

    
    <topic id="plc_notes">
      <title>Notes</title>
      <body>
        <ul id="ul_j4g_vgs_wbb">
          <li>PL/Container does not support the Greenplum Database domain object.</li>
          
          <li/>
          <li>If a PL/Container Docker container exceeds the maximum allowed memory, it is
            terminated and an out of memory warning is displayed. On Red Hat 6 or CentOS 6 systems
            that are configured with Docker version 1.7.1, the out of memory warning is also
            displayed if the PL/Container Docker container main program (PID 1) is terminated.</li>
          <li>In some cases, when PL/Container is running in a high concurrency environment, the
            Docker daemon hangs with log entries that indicate a memory shortage. This can happen
            even when the system seems to have adequate free memory.<p>The issue seems to be
              triggered by a combination of two factors, the aggressive virtual memory requirement
              of the Go language (<codeph>golang</codeph>) runtime that is used by PL/Container, and
              the Greenplum Database Linux server kernel parameter setting for
                <codeph>overcommit_memory</codeph>. The parameter is set to 2 which does not allow
              memory overcommit. </p><p>A workaround that might help is to increase the amount of
              swap space and increase the Linux server kernel parameter
                <codeph>overcommit_ratio</codeph>. If the issue still occurs after the changes,
              there might be memory shortage. You should check free memory on the system and add
              more RAM if needed. You can also decrease the cluster load.</p></li>
          <li>PL/Container does not limit the Docker base device size, the size of the Docker
            container. In some cases, the Docker daemon controls the base device size. For example,
            if the Docker storage driver is devicemapper, the Docker daemon
              <codeph>--storage-opt</codeph> option flag <codeph>dm.basesize</codeph> controls the
            base device size. The default base device size for devicemapper is 10GB. The Docker
            command <codeph>docker info</codeph> displays Docker system information including the
            storage driver. The base device size is displayed in Docker 1.12 and later. For
            information about Docker storage drivers, see the Docker information <xref
              href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-storage-driver"
              format="html" scope="external">Daemon storage-driver</xref>. <p>When setting the
              Docker base device size, the size must be set on all Greenplum Database
            hosts.</p></li>
          <li>When PL/Container logging is enabled, you can set the log level with the Greenplum
            Database server configuration parameter <codeph><xref
                href="../ref_guide/config_params/guc-list.xml#log_min_messages" scope="peer"
                >log_min_messages</xref></codeph>. The default log level is
            <codeph>warning</codeph>. The parameter controls the PL/Container log level and also
            controls the Greenplum Database log level.<ul id="ul_knd_jhl_mcb">
              <li>PL/Container logging is enabled or disabled for each runtime ID with the
                  <codeph>setting</codeph> attribute <codeph>use_container_logging</codeph>. The
                default is no logging. </li>
              <li>The PL/Container log information is the information from the UDF that is run in
                the Docker container. By default, the PL/Container log information is sent to a
                system service. On Red Hat 7 or CentOS 7 systems, the log information is sent to the
                  <codeph>journald</codeph> service. On Red Hat 6 or CentOS 6 systems, the log
                information is sent to the <codeph>syslogd</codeph> service. The PL/Container log
                information is sent to the log file of the host were the Docker container runs. </li>
              <li>The Greenplum Database log information is sent to log file on the Greenplum
                Database master.</li>
            </ul><p>When testing or troubleshooting a PL/Container UDF, you can change the Greenplum
              Database log level with the <codeph>SET</codeph> command. You can set the parameter in
              the session before you run your PL/Container UDF. This example sets the log level to
                <codeph>debug1</codeph>.</p><codeblock>SET log_min_messages='debug1' ;</codeblock>
            <note>The parameter <codeph>log_min_messages</codeph> controls both the Greenplum
              Database and PL/Container logging, increasing the log level might affect Greenplum
              Database performance even if a PL/Container UDF is not running.</note></li>
        </ul>
      </body>
    </topic>
  
    
    
  <topic xml:lang="en" id="topic_kds_plk_rbb">
    <title>References</title>
      <body>
      <p>Docker home page <xref href="https://www.docker.com/" format="html" scope="external"
          >https://www.docker.com/</xref></p>
      <p>Docker command line interface <xref
          href="https://docs.docker.com/engine/reference/commandline/cli/" format="html"
          scope="external">https://docs.docker.com/engine/reference/commandline/cli/</xref></p>
      <p>Dockerfile reference <xref href="https://docs.docker.com/engine/reference/builder/"
          format="html" scope="external"
        >https://docs.docker.com/engine/reference/builder/</xref></p>
      <p>Installing Docker on Linux systems <xref
          href="https://docs.docker.com/engine/installation/linux/centos/" format="html"
          scope="external">https://docs.docker.com/engine/installation/linux/centos/</xref></p>
      <p>Control and configure Docker with systemd <xref
          href="https://docs.docker.com/engine/admin/systemd/" format="html" scope="external"
          >https://docs.docker.com/engine/admin/systemd/</xref></p>
      <p>Changes to Python <xref href="https://docs.python.org/3/whatsnew/index.html" format="html"
          scope="external">What’s New in Python</xref></p>
      <p>Porting from Python 2 to 3 <xref href="https://docs.python.org/3/howto/pyporting.html"
          format="html" scope="external">Porting Python 2 Code to Python 3</xref></p>
      </body>
  </topic>

</topic>