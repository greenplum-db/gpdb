-- We rely on pageinspect to perform white-box testing for summarization.
-- White-box tests are necessary to ensure that summarization is done
-- successfully (to avoid cases where ranges have brin data tuples without
-- values or where the range is not covered by the revmap etc)
CREATE EXTENSION pageinspect;

--------------------------------------------------------------------------------
-- Test BRIN summarization with INSERT, brin_summarize_new_values() and VACUUM
--------------------------------------------------------------------------------

-- Create an index on an empty table
CREATE TABLE brin_ao_summarize_@amname@(i int) USING @amname@;
CREATE INDEX ON brin_ao_summarize_@amname@ USING brin(i) WITH (pages_per_range=1);

-- Sanity: There are no revmap/data pages as there is no data
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;

-- There is no data, so nothing to summarize.
SELECT brin_summarize_new_values('brin_ao_summarize_@amname@_i_idx');

-- Sanity: Index contents should not have changed due to the no-op summarize.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;

-- Drop the index
DROP INDEX brin_ao_summarize_@amname@_i_idx;

-- Create 3 blocks all on 1 QE, in 1 aoseg: 2 blocks full, 1 block with 1 tuple.
SELECT populate_pages('brin_ao_summarize_@amname@', 1, tid '(33554434, 0)');

-- Now re-create the index on the data inserted above.
CREATE INDEX ON brin_ao_summarize_@amname@ USING brin(i) WITH (pages_per_range=1);

-- Sanity: there should be 1 revmap page and 1 data page covering the 3 blocks.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

-- There is nothing new to summarize - it was all done during the index build.
SELECT brin_summarize_new_values('brin_ao_summarize_@amname@_i_idx');

-- Sanity: Index contents should not have changed due to the no-op summarize.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

-- Insert more so we have 5 blocks on 1 QE, in 1 aoseg: 4 blocks full, 1 block
-- with 1 tuple.
SELECT populate_pages('brin_ao_summarize_@amname@', 20, tid '(33554436, 0)');

-- Sanity: The 3rd block should have its summary updated and the last 2 blocks
-- will be left unsummarized.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

-- Summarize the last 2 blocks.
SELECT brin_summarize_new_values('brin_ao_summarize_@amname@_i_idx');

-- Sanity: All blocks should now have summary info.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

-- Insert more so we have 7 blocks on 1 QE, in 1 aoseg: 6 blocks full, 1 page
-- with 1 tuple.
SELECT populate_pages('brin_ao_summarize_@amname@', 30, tid '(33554438, 0)');

-- Sanity: The 5th block should have its summary updated and the last 2 blocks
-- will be left unsummarized.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

DELETE FROM brin_ao_summarize_@amname@ WHERE i = 1;

VACUUM brin_ao_summarize_@amname@;

-- A new INSERT would always map to the last range on the old segment and that
-- range will be updated to hold the new value, as part of INSERT.
INSERT INTO brin_ao_summarize_@amname@ VALUES(40);

-- All the live tuples will have been moved to a single new logical heap block
-- in seg2 (67108864). The 1 tuple INSERTed after the VACUUM should have gone to
-- the last block in seg1 (33554438).
SELECT distinct(right(split_part(ctid::text, ',', 1), -1)) AS blknum
  FROM brin_ao_summarize_@amname@;

-- Sanity: There should now be 2 revmap pages (1 new one for the new seg). Also,
-- there will be a new index tuple mapping to that new seg and block number.
-- Note: Since VACUUM summarizes all logical heap blocks (invokes summarization
-- with BRIN_ALL_BLOCKRANGES), and doesn't clean up existing summary info, we
-- can expect entries from the 1st seg to be still there (including blank entries
-- added for the 6th and 7th blocks)
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 3))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

-- VACUUM should have already summarized this one logical heap block, so
-- invoking summarization again will be a no-op.
SELECT brin_summarize_new_values('brin_ao_summarize_@amname@_i_idx');

-- Sanity: Index contents should not have changed due to the no-op summarize.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_@amname@_i_idx', 3))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_@amname@_i_idx', 2),
  'brin_ao_summarize_@amname@_i_idx') ORDER BY blknum, attnum;

--------------------------------------------------------------------------------
-- Specific range summarization
--------------------------------------------------------------------------------

-- We don't allow specific range summarization for AO tables at the moment.
SELECT brin_summarize_range('brin_ao_summarize_@amname@_i_idx', 1);

--------------------------------------------------------------------------------
-- Test summarization of last partial range.
--------------------------------------------------------------------------------

CREATE TABLE brin_ao_summarize_partial_@amname@(i int) USING @amname@;
CREATE INDEX ON brin_ao_summarize_partial_@amname@ USING brin(i) WITH (pages_per_range=3);

-- Insert 4 blocks of data on 1 QE, in 1 aoseg; 3 blocks full, 1 block with 1 tuple.
-- The 1st range [33554432, 33554434] is full and the last range [33554435, 33554437]
-- is partially full with just 1 block: 33554435.
SELECT populate_pages('brin_ao_summarize_partial_@amname@', 1, tid '(33554435, 0)');

-- Sanity: We expect no summary information to be present.
-- Reason: For an empty AO table, when INSERTing into the 1st range, we don't
-- summarize. brininsert() -> brinGetTupleForHeapBlock() actually returns NULL
-- in this case as revmap_get_blkno_ao() returns InvalidBlockNumber.
-- This is contrary to heap behavior (where we return 1).
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_partial_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_partial_@amname@_i_idx') - 1) blkno;

-- This will summarize both the first range and the last partial range.
SELECT brin_summarize_new_values('brin_ao_summarize_partial_@amname@_i_idx');

-- Sanity: Both ranges have been summarized.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_ao_summarize_partial_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_ao_summarize_partial_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_ao_summarize_partial_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_ao_summarize_partial_@amname@_i_idx', 2),
  'brin_ao_summarize_partial_@amname@_i_idx') ORDER BY blknum, attnum;

--------------------------------------------------------------------------------
-- Test cases with concurrency for BRIN indexes on AO/CO tables.
--------------------------------------------------------------------------------

-- Case 1: Ensure that we can summarize the last partial range, even if there are
-- concurrent inserts to it, while summarization was in flight.

CREATE TABLE brin_range_extended1_@amname@(i int) USING @amname@;
CREATE INDEX ON brin_range_extended1_@amname@ USING brin(i) WITH (pages_per_range=5);

-- Insert 3 blocks of data on 1 QE, in 1 aoseg; 2 blocks full, 1 block with 1 tuple.
SELECT populate_pages('brin_range_extended1_@amname@', 1, tid '(33554434, 0)');

-- Set up to suspend execution when will attempt to summarize the final partial
-- range below: [33554432, 33554434].
SELECT gp_inject_fault('summarize_last_partial_range', 'suspend', dbid)
  FROM gp_segment_configuration WHERE content = 1 AND role = 'p';

1&: SELECT brin_summarize_new_values('brin_range_extended1_@amname@_i_idx');

SELECT gp_wait_until_triggered_fault('summarize_last_partial_range', 1, dbid)
  FROM gp_segment_configuration WHERE content = 1 AND role = 'p';

-- Sanity: We should only have 1 (placeholder) tuple inserted (for the final
-- partial range [33554432, 33554434]).
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended1_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended1_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended1_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended1_@amname@_i_idx', 2),
  'brin_range_extended1_@amname@_i_idx') ORDER BY blknum, attnum;

-- Insert a different value into seg1 concurrently.
INSERT INTO brin_range_extended1_@amname@ VALUES(20);

-- Sanity: The earlier placeholder tuple has been modified by the INSERT to
-- contain only the value 20. The tuple is still a placeholder.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended1_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended1_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended1_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended1_@amname@_i_idx', 2),
  'brin_range_extended1_@amname@_i_idx') ORDER BY blknum, attnum;

SELECT gp_inject_fault('summarize_last_partial_range', 'reset', dbid)
  FROM gp_segment_configuration WHERE content = 1 AND role = 'p';

1<:

-- Sanity: We should have the final partial range [33554432, 33554434] summarized
-- with both existing tuples and the concurrently inserted tuple (since the
-- concurrently insert did not extend the range). Also, the index tuple should
-- no longer be a placeholder tuple.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended1_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended1_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended1_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended1_@amname@_i_idx', 2),
  'brin_range_extended1_@amname@_i_idx') ORDER BY blknum, attnum;

-- Case 2: Ensure that we don't effectively summarize the last partial range in
-- case it was extended by another transaction, while summarization was in flight.

CREATE TABLE brin_range_extended2_@amname@(i int) USING @amname@;
CREATE INDEX ON brin_range_extended2_@amname@ USING brin(i) WITH (pages_per_range=5);

-- Insert 3 blocks of data on 1 QE, in 1 aoseg; 2 blocks full, 1 block with 1 tuple.
SELECT populate_pages('brin_range_extended2_@amname@', 1, tid '(33554434, 0)');

-- Set up to suspend execution when will attempt to summarize the final partial
-- range below: [33554432, 33554434].
SELECT gp_inject_fault('summarize_last_partial_range', 'suspend', dbid)
  FROM gp_segment_configuration WHERE content = 1 AND role = 'p';

1&: SELECT brin_summarize_new_values('brin_range_extended2_@amname@_i_idx');

SELECT gp_wait_until_triggered_fault('summarize_last_partial_range', 1, dbid)
  FROM gp_segment_configuration WHERE content = 1 AND role = 'p';

-- Sanity: We should only have 1 (placeholder) tuple inserted (for the final
-- partial range [33554432, 33554434]).
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended2_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended2_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended2_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended2_@amname@_i_idx', 2),
  'brin_range_extended2_@amname@_i_idx') ORDER BY blknum, attnum;

-- Extend the last partial range by 1 block.
SELECT populate_pages('brin_range_extended2_@amname@', 20, tid '(33554435, 0)');

-- Sanity: The earlier placeholder tuple has been modified by the concurrent
-- insert to contain only the value 20. The tuple is still a placeholder.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended2_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended2_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended2_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended2_@amname@_i_idx', 2),
  'brin_range_extended2_@amname@_i_idx') ORDER BY blknum, attnum;

SELECT gp_inject_fault('summarize_last_partial_range', 'reset', dbid)
  FROM gp_segment_configuration WHERE content = 1 AND role = 'p';

1<:

-- Sanity: There should be no change to the summary information since the range
-- was concurrently extended and we had to bail out from the summarize call.
-- Note: even though the summary doesn't take into account the value i = 1, this
-- is safe as it is a placeholder.
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended2_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended2_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended2_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended2_@amname@_i_idx', 2),
  'brin_range_extended2_@amname@_i_idx') ORDER BY blknum, attnum;

-- Another insert into the same QE and the same range should not change the fact
-- that the summary tuple is a placeholder tuple.
INSERT INTO brin_range_extended2_@amname@ VALUES(30);
1U: SELECT blkno, brin_page_type(get_raw_page('brin_range_extended2_@amname@_i_idx', blkno)) FROM
  generate_series(0, blocks('brin_range_extended2_@amname@_i_idx') - 1) blkno;
1U: SELECT * FROM brin_revmap_data(get_raw_page('brin_range_extended2_@amname@_i_idx', 1))
  WHERE pages != '(0,0)' order by 1;
1U: SELECT * FROM brin_page_items(get_raw_page('brin_range_extended2_@amname@_i_idx', 2),
  'brin_range_extended2_@amname@_i_idx') ORDER BY blknum, attnum;

DROP EXTENSION pageinspect;
