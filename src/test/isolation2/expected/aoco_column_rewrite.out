--------------------------------------------------------------------------------
-- Tests for various scenarios with the column rewrite optimization
-- for AT on AOCO tables
--------------------------------------------------------------------------------

PREPARE attribute_encoding_check AS SELECT c.relname, a.attname, e.filenum, e.attoptions FROM pg_attribute_encoding e, pg_class c, pg_attribute a WHERE e.attrelid = c.oid AND e.attnum = a.attnum and e.attrelid = a.attrelid AND c.relname LIKE $1;
PREPARE

CREATE TABLE if not exists relfilenodecheck(segid int, relname text, relfilenodebefore int, relfilenodeafter int, casename text);
CREATE

PREPARE capturerelfilenodebefore AS INSERT INTO relfilenodecheck SELECT -1 segid, relname, pg_relation_filenode(relname::text) as relfilenode, NULL::int, $1 as casename FROM pg_class WHERE relname LIKE $2 UNION SELECT gp_segment_id segid, relname, pg_relation_filenode(relname::text) as relfilenode, NULL::int, $1 as casename  FROM gp_dist_random('pg_class') WHERE relname LIKE $2 ORDER BY segid;
PREPARE

PREPARE checkrelfilenodediff AS SELECT a.segid, b.casename, b.relname, (relfilenodebefore != a.relfilenode) rewritten FROM ( SELECT -1 segid, relname, pg_relation_filenode(relname::text) as relfilenode FROM pg_class WHERE relname LIKE $2 UNION SELECT gp_segment_id segid, relname, pg_relation_filenode(relname::text) as relfilenode FROM gp_dist_random('pg_class') WHERE relname LIKE $2 ORDER BY segid )a, relfilenodecheck b WHERE b.casename LIKE $1 and b.relname LIKE $2 and a.segid = b.segid;
PREPARE

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE and ADD COLUMN on AOCO doesn't rewrite the entire table
--------------------------------------------------------------------------------

CREATE TABLE alter_type_aoco(a int, b int, c int) using ao_column;
CREATE
INSERT INTO alter_type_aoco VALUES (20,1,2);
INSERT 1
EXECUTE attribute_encoding_check ('alter_type_aoco');
 relname         | attname | filenum | attoptions                                                  
-----------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 1        | 48  | 48               | 1        | 3             | 1     
 1          | 1     | 1          | 129            | 1        | 48  | 48               | 1        | 3             | 1     
 1          | 1     | 2          | 257            | 1        | 48  | 48               | 1        | 3             | 1     
(3 rows)
EXECUTE capturerelfilenodebefore ('alter_column', 'alter_type_aoco');
EXECUTE 4
SELECT * FROM alter_type_aoco;
 a  | b | c 
----+---+---
 20 | 1 | 2 
(1 row)

ALTER TABLE alter_type_aoco ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_type_aoco');
 relname         | attname | filenum | attoptions                                                  
-----------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | b       | 1602    | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 1        | 48  | 48               | 2        | 3             | 1     
 1          | 1     | 1          | 204929         | 1        | 48  | 48               | 2        | 3             | 1     
 1          | 1     | 2          | 257            | 1        | 48  | 48               | 2        | 3             | 1     
(3 rows)
EXECUTE checkrelfilenodediff ('alter_column', 'alter_type_aoco');
 segid | casename     | relname         | rewritten 
-------+--------------+-----------------+-----------
 0     | alter_column | alter_type_aoco | f         
 1     | alter_column | alter_type_aoco | f         
 -1    | alter_column | alter_type_aoco | f         
 2     | alter_column | alter_type_aoco | f         
(4 rows)
-- data is intact
SELECT * FROM alter_type_aoco;
 a  | b | c 
----+---+---
 20 | 1 | 2 
(1 row)
INSERT INTO alter_type_aoco VALUES (20,'1',2);
INSERT 1
-- data is intact
SELECT * FROM alter_type_aoco;
 a  | b | c 
----+---+---
 20 | 1 | 2 
 20 | 1 | 2 
(2 rows)

ALTER TABLE alter_type_aoco ADD COLUMN d int;
ALTER

INSERT INTO alter_type_aoco VALUES (20,'1',2, 3);
INSERT 1
-- check if we chose correct filenum for newly added column
EXECUTE attribute_encoding_check ('alter_type_aoco');
 relname         | attname | filenum | attoptions                                                  
-----------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | b       | 1602    | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco | d       | 4       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(4 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 3        | 144 | 144              | 5        | 3             | 1     
 1          | 1     | 1          | 204929         | 3        | 144 | 144              | 5        | 3             | 1     
 1          | 1     | 2          | 257            | 3        | 144 | 144              | 5        | 3             | 1     
 1          | 1     | 3          | 385            | 3        | 144 | 144              | 5        | 3             | 1     
(4 rows)
DROP TABLE alter_type_aoco;
DROP
CHECKPOINT;
CHECKPOINT
-- check if all files are dropped correctly
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'alter_type_aoco');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)

--------------------------------------------------------------------------------
-- Test if column rewrite handles deleted rows in blockdirectory correctly for
-- more than 1 minipage

-- We create a table and its blkdir and insert enough data to have more than one
-- minipage in the block directory, and check if the column rewrite rewrites the
-- blockdirectory correctly
--------------------------------------------------------------------------------
CREATE TABLE alter_type_aoco_delete(a int, b int, c int) USING ao_column;
CREATE
CREATE INDEX at_aoco_idx on alter_type_aoco_delete(c);
CREATE
INSERT INTO alter_type_aoco_delete SELECT 1,i,i FROM generate_series(1,10000)i;
INSERT 10000
DELETE FROM alter_type_aoco_delete WHERE b%3 = 1;
DELETE 3334
EXECUTE capturerelfilenodebefore ('alter_column', 'alter_type_aoco_delete');
EXECUTE 4
SELECT count(*) FROM alter_type_aoco_delete;
 count 
-------
 6666  
(1 row)

ALTER TABLE alter_type_aoco_delete ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_type_aoco_delete');
 relname                | attname | filenum | attoptions                                                  
------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_delete | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete | b       | 1602    | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_delete') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof   | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-------+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 10000    | 40088 | 40088            | 3        | 3             | 1     
 1          | 1     | 1          | 204929         | 10000    | 48984 | 48984            | 3        | 3             | 1     
 1          | 1     | 2          | 257            | 10000    | 40088 | 40088            | 3        | 3             | 1     
(3 rows)
SELECT gp_segment_id, (gp_toolkit.__gp_aoblkdir('alter_type_aoco_delete')).* FROM gp_dist_random('gp_id');
 gp_segment_id | tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------------+---------+-------+----------------+----------+--------------+-------------+-----------
 1             | (0,1)   | 1     | 0              | 0        | 1            | 0           | 8181      
 1             | (0,1)   | 1     | 0              | 1        | 8182         | 32768       | 1819      
 1             | (0,3)   | 1     | 2              | 0        | 1            | 0           | 8181      
 1             | (0,3)   | 1     | 2              | 1        | 8182         | 32768       | 1819      
 1             | (0,4)   | 1     | 1              | 0        | 1            | 0           | 6766      
 1             | (0,4)   | 1     | 1              | 1        | 6767         | 32768       | 3234      
(6 rows)
EXECUTE checkrelfilenodediff ('alter_column', 'alter_type_aoco_delete');
 segid | casename     | relname                | rewritten 
-------+--------------+------------------------+-----------
 2     | alter_column | alter_type_aoco_delete | f         
 0     | alter_column | alter_type_aoco_delete | f         
 1     | alter_column | alter_type_aoco_delete | f         
 -1    | alter_column | alter_type_aoco_delete | f         
(4 rows)
SELECT count(b) FROM alter_type_aoco_delete;
 count 
-------
 6666  
(1 row)
SELECT count(*) FROM alter_type_aoco_delete;
 count 
-------
 6666  
(1 row)

--------------------------------------------------------------------------------
-- Test if column rewrite handles blockdirectory and visimap
-- for deleted rows correctly with multiple blocks in same segfile

-- Here, we insert data into two different blocks and delete all rows from first
-- block. We test if that block is still replicated in the rewritten col
--------------------------------------------------------------------------------
CREATE TABLE alter_type_aoco_delete1(a int, b int, c int) USING ao_column;
CREATE
CREATE INDEX at_aoco_idx1 on alter_type_aoco_delete1(c);
CREATE
INSERT INTO alter_type_aoco_delete1 VALUES (1,2,2);
INSERT 1
INSERT INTO alter_type_aoco_delete1 VALUES (1,3,3);
INSERT 1
DELETE FROM alter_type_aoco_delete1 WHERE b = 2;
DELETE 1
EXECUTE attribute_encoding_check ('alter_type_aoco_delete1');
 relname                 | attname | filenum | attoptions                                                  
-------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_delete1 | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete1 | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete1 | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_delete1') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 2        | 96  | 96               | 3        | 3             | 1     
 1          | 1     | 1          | 129            | 2        | 96  | 96               | 3        | 3             | 1     
 1          | 1     | 2          | 257            | 2        | 96  | 96               | 3        | 3             | 1     
(3 rows)
SELECT (gp_toolkit.__gp_aovisimap('alter_type_aoco_delete1')).* FROM gp_dist_random('gp_id');
 tid          | segno | row_num 
--------------+-------+---------
 (33554432,2) | 1     | 1       
(1 row)
SELECT gp_segment_id, (gp_toolkit.__gp_aoblkdir('alter_type_aoco_delete1')).* FROM gp_dist_random('gp_id');
 gp_segment_id | tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------------+---------+-------+----------------+----------+--------------+-------------+-----------
 1             | (0,4)   | 1     | 0              | 0        | 1            | 0           | 1         
 1             | (0,4)   | 1     | 0              | 1        | 101          | 48          | 1         
 1             | (0,5)   | 1     | 1              | 0        | 1            | 0           | 1         
 1             | (0,5)   | 1     | 1              | 1        | 101          | 48          | 1         
 1             | (0,6)   | 1     | 2              | 0        | 1            | 0           | 1         
 1             | (0,6)   | 1     | 2              | 1        | 101          | 48          | 1         
(6 rows)
EXECUTE capturerelfilenodebefore ('alter_column', 'alter_type_aoco_delete1');
EXECUTE 4
SELECT * FROM alter_type_aoco_delete1;
 a | b | c 
---+---+---
 1 | 3 | 3 
(1 row)

ALTER TABLE alter_type_aoco_delete1 ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_type_aoco_delete1');
 relname                 | attname | filenum | attoptions                                                  
-------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_delete1 | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete1 | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete1 | b       | 1602    | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_delete1') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 2        | 96  | 96               | 4        | 3             | 1     
 1          | 1     | 1          | 204929         | 2        | 96  | 96               | 4        | 3             | 1     
 1          | 1     | 2          | 257            | 2        | 96  | 96               | 4        | 3             | 1     
(3 rows)
SELECT (gp_toolkit.__gp_aovisimap('alter_type_aoco_delete1')).* FROM gp_dist_random('gp_id');
 tid          | segno | row_num 
--------------+-------+---------
 (33554432,2) | 1     | 1       
(1 row)
SELECT gp_segment_id, (gp_toolkit.__gp_aoblkdir('alter_type_aoco_delete1')).* FROM gp_dist_random('gp_id');
 gp_segment_id | tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------------+---------+-------+----------------+----------+--------------+-------------+-----------
 1             | (0,4)   | 1     | 0              | 0        | 1            | 0           | 1         
 1             | (0,4)   | 1     | 0              | 1        | 101          | 48          | 1         
 1             | (0,6)   | 1     | 2              | 0        | 1            | 0           | 1         
 1             | (0,6)   | 1     | 2              | 1        | 101          | 48          | 1         
 1             | (0,7)   | 1     | 1              | 0        | 1            | 0           | 1         
 1             | (0,7)   | 1     | 1              | 1        | 101          | 48          | 1         
(6 rows)
EXECUTE checkrelfilenodediff ('alter_column', 'alter_type_aoco_delete1');
 segid | casename     | relname                 | rewritten 
-------+--------------+-------------------------+-----------
 2     | alter_column | alter_type_aoco_delete1 | f         
 -1    | alter_column | alter_type_aoco_delete1 | f         
 0     | alter_column | alter_type_aoco_delete1 | f         
 1     | alter_column | alter_type_aoco_delete1 | f         
(4 rows)
SELECT b FROM alter_type_aoco_delete1;
 b 
---
 3 
(1 row)
SELECT * FROM alter_type_aoco_delete1;
 a | b | c 
---+---+---
 1 | 3 | 3 
(1 row)

--------------------------------------------------------------------------------
-- Test if column rewrite handles blockdirectory and visimap
-- for deleted rows correctly with multiple blocks in same segfile

-- Here, we insert data into two different blocks and delete all rows from second
-- block. We test if that block is still replicated in the rewritten col
--------------------------------------------------------------------------------
CREATE TABLE alter_type_aoco_delete2(a int, b int, c int) USING ao_column;
CREATE
CREATE INDEX at_aoco_idx2 on alter_type_aoco_delete2(c);
CREATE
INSERT INTO alter_type_aoco_delete2 VALUES (1,2,2);
INSERT 1
INSERT INTO alter_type_aoco_delete2 VALUES (1,3,3);
INSERT 1
DELETE FROM alter_type_aoco_delete2 WHERE b = 3;
DELETE 1
EXECUTE attribute_encoding_check ('alter_type_aoco_delete2');
 relname                 | attname | filenum | attoptions                                                  
-------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_delete2 | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete2 | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete2 | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_delete2') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 2        | 96  | 96               | 3        | 3             | 1     
 1          | 1     | 1          | 129            | 2        | 96  | 96               | 3        | 3             | 1     
 1          | 1     | 2          | 257            | 2        | 96  | 96               | 3        | 3             | 1     
(3 rows)
SELECT (gp_toolkit.__gp_aovisimap('alter_type_aoco_delete2')).* FROM gp_dist_random('gp_id');
 tid            | segno | row_num 
----------------+-------+---------
 (33554432,102) | 1     | 101     
(1 row)
SELECT gp_segment_id, (gp_toolkit.__gp_aoblkdir('alter_type_aoco_delete2')).* FROM gp_dist_random('gp_id');
 gp_segment_id | tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------------+---------+-------+----------------+----------+--------------+-------------+-----------
 1             | (0,4)   | 1     | 0              | 0        | 1            | 0           | 1         
 1             | (0,4)   | 1     | 0              | 1        | 101          | 48          | 1         
 1             | (0,5)   | 1     | 1              | 0        | 1            | 0           | 1         
 1             | (0,5)   | 1     | 1              | 1        | 101          | 48          | 1         
 1             | (0,6)   | 1     | 2              | 0        | 1            | 0           | 1         
 1             | (0,6)   | 1     | 2              | 1        | 101          | 48          | 1         
(6 rows)
EXECUTE capturerelfilenodebefore ('alter_column', 'alter_type_aoco_delete2');
EXECUTE 4
SELECT * FROM alter_type_aoco_delete2;
 a | b | c 
---+---+---
 1 | 2 | 2 
(1 row)

ALTER TABLE alter_type_aoco_delete2 ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_type_aoco_delete2');
 relname                 | attname | filenum | attoptions                                                  
-------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_delete2 | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete2 | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_delete2 | b       | 1602    | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_delete2') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 2        | 96  | 96               | 4        | 3             | 1     
 1          | 1     | 1          | 204929         | 2        | 96  | 96               | 4        | 3             | 1     
 1          | 1     | 2          | 257            | 2        | 96  | 96               | 4        | 3             | 1     
(3 rows)
SELECT (gp_toolkit.__gp_aovisimap('alter_type_aoco_delete2')).* FROM gp_dist_random('gp_id');
 tid            | segno | row_num 
----------------+-------+---------
 (33554432,102) | 1     | 101     
(1 row)
SELECT gp_segment_id, (gp_toolkit.__gp_aoblkdir('alter_type_aoco_delete2')).* FROM gp_dist_random('gp_id');
 gp_segment_id | tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------------+---------+-------+----------------+----------+--------------+-------------+-----------
 1             | (0,4)   | 1     | 0              | 0        | 1            | 0           | 1         
 1             | (0,4)   | 1     | 0              | 1        | 101          | 48          | 1         
 1             | (0,6)   | 1     | 2              | 0        | 1            | 0           | 1         
 1             | (0,6)   | 1     | 2              | 1        | 101          | 48          | 1         
 1             | (0,7)   | 1     | 1              | 0        | 1            | 0           | 1         
 1             | (0,7)   | 1     | 1              | 1        | 101          | 48          | 1         
(6 rows)
EXECUTE checkrelfilenodediff ('alter_column', 'alter_type_aoco_delete2');
 segid | casename     | relname                 | rewritten 
-------+--------------+-------------------------+-----------
 0     | alter_column | alter_type_aoco_delete2 | f         
 1     | alter_column | alter_type_aoco_delete2 | f         
 -1    | alter_column | alter_type_aoco_delete2 | f         
 2     | alter_column | alter_type_aoco_delete2 | f         
(4 rows)
SELECT b FROM alter_type_aoco_delete2;
 b 
---
 2 
(1 row)
SELECT * FROM alter_type_aoco_delete2;
 a | b | c 
---+---+---
 1 | 2 | 2 
(1 row)

--------------------------------------------------------------------------------
-- Test if AT ALTER COLUMN TYPE works fine when we need a full table rewrite.

-- We perform a AT subcmd which requires a full table rewrite, and check results
-- for the AT ALTER COLUMN TYPE after the table is fully rewritten
--------------------------------------------------------------------------------


CREATE TABLE alter_type_aoco_fullrewrite(a int, b int, c int) using ao_column;
CREATE
INSERT INTO alter_type_aoco_fullrewrite VALUES (20,1,2);
INSERT 1
EXECUTE attribute_encoding_check ('alter_type_aoco_fullrewrite');
 relname                     | attname | filenum | attoptions                                                  
-----------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_fullrewrite | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_fullrewrite | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_fullrewrite | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_fullrewrite') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 1        | 48  | 48               | 1        | 3             | 1     
 1          | 1     | 1          | 129            | 1        | 48  | 48               | 1        | 3             | 1     
 1          | 1     | 2          | 257            | 1        | 48  | 48               | 1        | 3             | 1     
(3 rows)
EXECUTE capturerelfilenodebefore ('alter_column', 'alter_type_aoco_fullrewrite');
EXECUTE 4
SELECT * FROM alter_type_aoco_fullrewrite;
 a  | b | c 
----+---+---
 20 | 1 | 2 
(1 row)

ALTER TABLE alter_type_aoco_fullrewrite ALTER COLUMN b TYPE text, ALTER COLUMN C SET ENCODING (compresslevel=4);
ALTER

EXECUTE attribute_encoding_check ('alter_type_aoco_fullrewrite');
 relname                     | attname | filenum | attoptions                                                  
-----------------------------+---------+---------+-------------------------------------------------------------
 alter_type_aoco_fullrewrite | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_type_aoco_fullrewrite | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=4'] 
 alter_type_aoco_fullrewrite | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_type_aoco_fullrewrite') ORDER BY segment_id, column_num;
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 0     | 0          | 0              | 1        | 48  | 48               | 1        | 3             | 1     
 1          | 0     | 1          | 128            | 1        | 48  | 48               | 1        | 3             | 1     
 1          | 0     | 2          | 256            | 1        | 48  | 48               | 1        | 3             | 1     
(3 rows)
EXECUTE checkrelfilenodediff ('alter_column', 'alter_type_aoco_fullrewrite');
 segid | casename     | relname                     | rewritten 
-------+--------------+-----------------------------+-----------
 0     | alter_column | alter_type_aoco_fullrewrite | t         
 1     | alter_column | alter_type_aoco_fullrewrite | t         
 2     | alter_column | alter_type_aoco_fullrewrite | t         
 -1    | alter_column | alter_type_aoco_fullrewrite | t         
(4 rows)
-- data is intact
SELECT * FROM alter_type_aoco_fullrewrite;
 a  | b | c 
----+---+---
 20 | 1 | 2 
(1 row)
INSERT INTO alter_type_aoco_fullrewrite VALUES (20,'1',2);
INSERT 1
-- data is intact
SELECT * FROM alter_type_aoco_fullrewrite;
 a  | b | c 
----+---+---
 20 | 1 | 2 
 20 | 1 | 2 
(2 rows)

--------------------------------------------------------------------------------
-- Test if AT ALTER COLUMN TYPE reindexes rewrite-affected indexes

-- We create indexes on columns and test if these indexes are rewritten
-- when any of the columns are rewritten on which the indexes depend on
-- but other indexes are unaffected
--------------------------------------------------------------------------------

CREATE TABLE alter_type_aoco(a int, b int, c int, d int) using ao_column;
CREATE

INSERT INTO alter_type_aoco VALUES (20, 1, 2, 3);
INSERT 1

CREATE UNIQUE INDEX idx1 on alter_type_aoco(a,b);
CREATE
CREATE INDEX idx2 on alter_type_aoco using btree(c);
CREATE
CREATE INDEX idx3 on alter_type_aoco using bitmap(a,b,c,d);
CREATE

EXECUTE capturerelfilenodebefore ('alter_column_b', 'idx1');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_b', 'idx2');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_b', 'idx3');
EXECUTE 4

ALTER TABLE alter_type_aoco ALTER COLUMN b TYPE text;
ALTER

EXECUTE checkrelfilenodediff ('alter_column_b', 'idx1');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 2     | alter_column_b | idx1    | t         
 -1    | alter_column_b | idx1    | t         
 0     | alter_column_b | idx1    | t         
 1     | alter_column_b | idx1    | t         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_b', 'idx2');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 2     | alter_column_b | idx2    | f         
 0     | alter_column_b | idx2    | f         
 1     | alter_column_b | idx2    | f         
 -1    | alter_column_b | idx2    | f         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_b', 'idx3');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 2     | alter_column_b | idx3    | t         
 -1    | alter_column_b | idx3    | t         
 0     | alter_column_b | idx3    | t         
 1     | alter_column_b | idx3    | t         
(4 rows)
INSERT INTO alter_type_aoco VALUES (20, '2', 3, 4);
INSERT 1
EXECUTE capturerelfilenodebefore ('alter_column_c', 'idx1');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_c', 'idx2');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_c', 'idx3');
EXECUTE 4

ALTER TABLE alter_type_aoco ALTER COLUMN c TYPE text;
ALTER

EXECUTE checkrelfilenodediff ('alter_column_c', 'idx1');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 -1    | alter_column_c | idx1    | f         
 2     | alter_column_c | idx1    | f         
 0     | alter_column_c | idx1    | f         
 1     | alter_column_c | idx1    | f         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_c', 'idx2');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 2     | alter_column_c | idx2    | t         
 0     | alter_column_c | idx2    | t         
 1     | alter_column_c | idx2    | t         
 -1    | alter_column_c | idx2    | t         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_c', 'idx3');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 0     | alter_column_c | idx3    | t         
 1     | alter_column_c | idx3    | t         
 -1    | alter_column_c | idx3    | t         
 2     | alter_column_c | idx3    | t         
(4 rows)
INSERT INTO alter_type_aoco VALUES (20, '3', '4', 5);
INSERT 1
EXECUTE capturerelfilenodebefore ('alter_column_d', 'idx1');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_d', 'idx2');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_d', 'idx3');
EXECUTE 4

ALTER TABLE alter_type_aoco ALTER COLUMN d TYPE text;
ALTER

EXECUTE checkrelfilenodediff ('alter_column_d', 'idx1');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 2     | alter_column_d | idx1    | f         
 0     | alter_column_d | idx1    | f         
 1     | alter_column_d | idx1    | f         
 -1    | alter_column_d | idx1    | f         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_d', 'idx2');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 0     | alter_column_d | idx2    | f         
 1     | alter_column_d | idx2    | f         
 2     | alter_column_d | idx2    | f         
 -1    | alter_column_d | idx2    | f         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_d', 'idx3');
 segid | casename       | relname | rewritten 
-------+----------------+---------+-----------
 0     | alter_column_d | idx3    | t         
 1     | alter_column_d | idx3    | t         
 -1    | alter_column_d | idx3    | t         
 2     | alter_column_d | idx3    | t         
(4 rows)
INSERT INTO alter_type_aoco VALUES (20, '4', '5', '6');
INSERT 1
-- data is intact
SELECT * FROM alter_type_aoco;
 a  | b | c | d 
----+---+---+---
 20 | 1 | 2 | 3 
 20 | 2 | 3 | 4 
 20 | 3 | 4 | 5 
 20 | 4 | 5 | 6 
(4 rows)


--------------------------------------------------------------------------------
-- Test if AT ALTER COLUMN TYPE for partitioned table

-- create 2 level partitions with same schema (regular case) and create index on some column
-- alter column on the partition table root and on the partitions and we check rewrite status and data status
-- filenum for partition roots
--------------------------------------------------------------------------------
CREATE TABLE part_alter_col(a int, b int, c int) PARTITION BY RANGE (A) (partition aa start (1) end (5) every (1)) USING ao_column;
CREATE
INSERT INTO part_alter_col VALUES (1,2,3);
INSERT 1
CREATE INDEX part_alter_col_idx1 on part_alter_col(b);
CREATE
CREATE INDEX part_alter_col_idx2 on part_alter_col(c);
CREATE
EXECUTE capturerelfilenodebefore ('alter_column_b', 'part_alter_col_1_prt_aa_1');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_b', 'part_alter_col_1_prt_aa_1_b_idx');
EXECUTE 4
EXECUTE capturerelfilenodebefore ('alter_column_b', 'part_alter_col_1_prt_aa_1_c_idx');
EXECUTE 4
EXECUTE attribute_encoding_check ('part_alter_col');
 relname        | attname | filenum | attoptions                                                  
----------------+---------+---------+-------------------------------------------------------------
 part_alter_col | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 part_alter_col | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 part_alter_col | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)

ALTER TABLE part_alter_col ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('part_alter_col');
 relname        | attname | filenum | attoptions                                                  
----------------+---------+---------+-------------------------------------------------------------
 part_alter_col | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 part_alter_col | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 part_alter_col | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
EXECUTE checkrelfilenodediff ('alter_column_b', 'part_alter_col_1_prt_aa_1');
 segid | casename       | relname                   | rewritten 
-------+----------------+---------------------------+-----------
 2     | alter_column_b | part_alter_col_1_prt_aa_1 | f         
 -1    | alter_column_b | part_alter_col_1_prt_aa_1 | f         
 0     | alter_column_b | part_alter_col_1_prt_aa_1 | f         
 1     | alter_column_b | part_alter_col_1_prt_aa_1 | f         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_b', 'part_alter_col_1_prt_aa_1_b_idx');
 segid | casename       | relname                         | rewritten 
-------+----------------+---------------------------------+-----------
 2     | alter_column_b | part_alter_col_1_prt_aa_1_b_idx | t         
 -1    | alter_column_b | part_alter_col_1_prt_aa_1_b_idx | t         
 0     | alter_column_b | part_alter_col_1_prt_aa_1_b_idx | t         
 1     | alter_column_b | part_alter_col_1_prt_aa_1_b_idx | t         
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_b', 'part_alter_col_1_prt_aa_1_c_idx');
 segid | casename       | relname                         | rewritten 
-------+----------------+---------------------------------+-----------
 -1    | alter_column_b | part_alter_col_1_prt_aa_1_c_idx | f         
 2     | alter_column_b | part_alter_col_1_prt_aa_1_c_idx | f         
 0     | alter_column_b | part_alter_col_1_prt_aa_1_c_idx | f         
 1     | alter_column_b | part_alter_col_1_prt_aa_1_c_idx | f         
(4 rows)
SELECT * FROM part_alter_col;
 a | b | c 
---+---+---
 1 | 2 | 3 
(1 row)
DROP TABLE part_alter_col;
DROP
CHECKPOINT;
CHECKPOINT
-- check if all files are dropped correctly
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'part_alter_col');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)
--------------------------------------------------------------------------------
-- Test if column rewrite works when AT ALTER COLUMN TYPE for a column
-- and then alter it back to the original type

-- Check reloptions, pg_attribute_encoding, visimap, blkdirectory alongside the rewrite
--------------------------------------------------------------------------------
CREATE TABLE alter_column_back(a int, b int ENCODING (compresstype='zlib', compresslevel=5), c int) using ao_column with (compresstype='zlib', compresslevel=2);
CREATE
INSERT INTO alter_column_back VALUES (1,2,3), (1,2,4), (1,2,5);
INSERT 3
CREATE INDEX alter_column_back_idx1 ON alter_column_back(a,c);
CREATE
DELETE FROM alter_column_back WHERE c=5;
DELETE 1
EXECUTE capturerelfilenodebefore ('alter_column', 'alter_column_back');
EXECUTE 4
SELECT atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_back'::regclass AND attname='b';
 atttypid 
----------
 integer  
(1 row)

ALTER TABLE alter_column_back ALTER COLUMN b TYPE text;
ALTER

SELECT c.relname, c.reloptions FROM pg_class c WHERE c.relname LIKE 'alter_column_back';
 relname           | reloptions                                                                   
-------------------+------------------------------------------------------------------------------
 alter_column_back | ['compresstype=zlib', 'compresslevel=2', 'blocksize=32768', 'checksum=true'] 
(1 row)
EXECUTE checkrelfilenodediff ('alter_column', 'alter_column_back');
 segid | casename     | relname           | rewritten 
-------+--------------+-------------------+-----------
 2     | alter_column | alter_column_back | f         
 0     | alter_column | alter_column_back | f         
 1     | alter_column | alter_column_back | f         
 -1    | alter_column | alter_column_back | f         
(4 rows)
SELECT atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_back'::regclass AND attname='b';
 atttypid 
----------
 text     
(1 row)
INSERT INTO alter_column_back VALUES (1,'2',3);
INSERT 1
DELETE FROM alter_column_back where c=4;
DELETE 1
EXECUTE capturerelfilenodebefore ('alter_column_back', 'alter_column_back');
EXECUTE 4

ALTER TABLE alter_column_back ALTER COLUMN b TYPE int using b::int;
ALTER

SELECT c.relname, c.reloptions FROM pg_class c WHERE c.relname LIKE 'alter_column_back';
 relname           | reloptions                                                                   
-------------------+------------------------------------------------------------------------------
 alter_column_back | ['compresstype=zlib', 'compresslevel=2', 'blocksize=32768', 'checksum=true'] 
(1 row)
EXECUTE attribute_encoding_check ('alter_column_back');
 relname           | attname | filenum | attoptions                                                  
-------------------+---------+---------+-------------------------------------------------------------
 alter_column_back | a       | 1       | ['compresstype=zlib', 'compresslevel=2', 'blocksize=32768'] 
 alter_column_back | c       | 3       | ['compresstype=zlib', 'compresslevel=2', 'blocksize=32768'] 
 alter_column_back | b       | 2       | ['compresstype=zlib', 'compresslevel=5', 'blocksize=32768'] 
(3 rows)
SELECT (gp_toolkit.__gp_aovisimap('alter_column_back')).* FROM gp_dist_random('gp_id');
 tid          | segno | row_num 
--------------+-------+---------
 (33554432,3) | 1     | 2       
 (33554432,4) | 1     | 3       
(2 rows)
SELECT gp_segment_id, (gp_toolkit.__gp_aoblkdir('alter_column_back')).* FROM gp_dist_random('gp_id');
 gp_segment_id | tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------------+---------+-------+----------------+----------+--------------+-------------+-----------
 1             | (0,5)   | 1     | 0              | 0        | 1            | 0           | 3         
 1             | (0,5)   | 1     | 0              | 1        | 101          | 48          | 1         
 1             | (0,7)   | 1     | 2              | 0        | 1            | 0           | 3         
 1             | (0,7)   | 1     | 2              | 1        | 101          | 48          | 1         
 1             | (0,8)   | 1     | 1              | 0        | 1            | 0           | 3         
 1             | (0,8)   | 1     | 1              | 1        | 101          | 48          | 1         
(6 rows)
EXECUTE checkrelfilenodediff ('alter_column_back', 'alter_column_back');
 segid | casename          | relname           | rewritten 
-------+-------------------+-------------------+-----------
 2     | alter_column_back | alter_column_back | f         
 0     | alter_column_back | alter_column_back | f         
 1     | alter_column_back | alter_column_back | f         
 -1    | alter_column_back | alter_column_back | f         
(4 rows)
SELECT atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_back'::regclass AND attname='b';
 atttypid 
----------
 integer  
(1 row)
SELECT * FROM alter_column_back;
 a | b | c 
---+---+---
 1 | 2 | 3 
 1 | 2 | 3 
(2 rows)
DROP TABLE alter_column_back;
DROP
CHECKPOINT;
CHECKPOINT
-- check if all files are dropped correctly
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'alter_column_back');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE and SET ACCESS METHOD can be done in the same command
-- Verify if we rewrite the table
--------------------------------------------------------------------------------
CREATE TABLE alter_column_set_am(a int, b int, c int) using ao_column;
CREATE
INSERT INTO alter_column_set_am VALUES (1,2,3);
INSERT 1
EXECUTE capturerelfilenodebefore ('alter_column_set_am_aorow', 'alter_column_set_am');
EXECUTE 4
EXECUTE attribute_encoding_check ('alter_column_set_am');
 relname             | attname | filenum | attoptions                                                  
---------------------+---------+---------+-------------------------------------------------------------
 alter_column_set_am | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_set_am | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_set_am | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)

ALTER TABLE alter_column_set_am SET ACCESS METHOD ao_row, ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_column_set_am');
 relname | attname | filenum | attoptions 
---------+---------+---------+------------
(0 rows)
EXECUTE checkrelfilenodediff ('alter_column_set_am_aorow', 'alter_column_set_am');
 segid | casename                  | relname             | rewritten 
-------+---------------------------+---------------------+-----------
 -1    | alter_column_set_am_aorow | alter_column_set_am | t         
 2     | alter_column_set_am_aorow | alter_column_set_am | t         
 0     | alter_column_set_am_aorow | alter_column_set_am | t         
 1     | alter_column_set_am_aorow | alter_column_set_am | t         
(4 rows)
SELECT * FROM alter_column_set_am;
 a | b | c 
---+---+---
 1 | 2 | 3 
(1 row)
INSERT INTO alter_column_set_am VALUES (1,'2',3);
INSERT 1
EXECUTE capturerelfilenodebefore ('alter_column_set_am_aocol', 'alter_column_set_am');
EXECUTE 4
EXECUTE attribute_encoding_check ('alter_column_set_am');
 relname | attname | filenum | attoptions 
---------+---------+---------+------------
(0 rows)

ALTER TABLE alter_column_set_am SET ACCESS METHOD ao_column, ALTER COLUMN c TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_column_set_am');
 relname             | attname | filenum | attoptions                                                  
---------------------+---------+---------+-------------------------------------------------------------
 alter_column_set_am | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_set_am | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_set_am | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
EXECUTE checkrelfilenodediff ('alter_column_set_am_aocol', 'alter_column_set_am');
 segid | casename                  | relname             | rewritten 
-------+---------------------------+---------------------+-----------
 -1    | alter_column_set_am_aocol | alter_column_set_am | t         
 2     | alter_column_set_am_aocol | alter_column_set_am | t         
 0     | alter_column_set_am_aocol | alter_column_set_am | t         
 1     | alter_column_set_am_aocol | alter_column_set_am | t         
(4 rows)
SELECT * FROM alter_column_set_am;
 a | b | c 
---+---+---
 1 | 2 | 3 
 1 | 2 | 3 
(2 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE and ADD COLUMN can be done in the same command
-- Verify if we don't rewrite the table
--------------------------------------------------------------------------------
CREATE TABLE alter_column_add_col(a int, b int, c int) using ao_column;
CREATE
INSERT INTO alter_column_add_col VALUES (1,2,3);
INSERT 1
EXECUTE capturerelfilenodebefore ('alter_col_add_col', 'alter_column_add_col');
EXECUTE 4
EXECUTE attribute_encoding_check ('alter_column_add_col');
 relname              | attname | filenum | attoptions                                                  
----------------------+---------+---------+-------------------------------------------------------------
 alter_column_add_col | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_add_col | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_add_col | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)

ALTER TABLE alter_column_add_col ADD COLUMN d int, ALTER COLUMN b TYPE text;
ALTER

EXECUTE attribute_encoding_check ('alter_column_add_col');
 relname              | attname | filenum | attoptions                                                  
----------------------+---------+---------+-------------------------------------------------------------
 alter_column_add_col | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_add_col | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_add_col | b       | 1602    | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_add_col | d       | 4       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(4 rows)
EXECUTE checkrelfilenodediff ('alter_column_add_col', 'alter_column_add_col');
 segid | casename | relname | rewritten 
-------+----------+---------+-----------
(0 rows)
SELECT * FROM alter_column_add_col;
 a | b | c | d 
---+---+---+---
 1 | 2 | 3 |   
(1 row)
INSERT INTO alter_column_add_col VALUES (1,'2',3, 4);
INSERT 1
SELECT * FROM alter_column_add_col;
 a | b | c | d 
---+---+---+---
 1 | 2 | 3 |   
 1 | 2 | 3 | 4 
(2 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE and other AT commands can be done in the same command
-- Verify if we rewrite the table
--------------------------------------------------------------------------------
CREATE TABLE alter_column_other(a int, b int, c int) using ao_column;
CREATE
INSERT INTO alter_column_other VALUES (1,2,3);
INSERT 1
EXECUTE capturerelfilenodebefore ('alter_column_other', 'alter_column_other');
EXECUTE 4
EXECUTE attribute_encoding_check ('alter_column_other');
 relname            | attname | filenum | attoptions                                                  
--------------------+---------+---------+-------------------------------------------------------------
 alter_column_other | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_other | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_other | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)

ALTER TABLE alter_column_other ALTER COLUMN b TYPE text, ALTER COLUMN c SET DEFAULT 5;
ALTER

EXECUTE attribute_encoding_check ('alter_column_other');
 relname            | attname | filenum | attoptions                                                  
--------------------+---------+---------+-------------------------------------------------------------
 alter_column_other | b       | 2       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_other | c       | 3       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
 alter_column_other | a       | 1       | ['compresstype=none', 'blocksize=32768', 'compresslevel=0'] 
(3 rows)
EXECUTE checkrelfilenodediff ('alter_column_other', 'alter_column_other');
 segid | casename           | relname            | rewritten 
-------+--------------------+--------------------+-----------
 2     | alter_column_other | alter_column_other | t         
 -1    | alter_column_other | alter_column_other | t         
 0     | alter_column_other | alter_column_other | t         
 1     | alter_column_other | alter_column_other | t         
(4 rows)
SELECT * FROM alter_column_other;
 a | b | c 
---+---+---
 1 | 2 | 3 
(1 row)
INSERT INTO alter_column_other VALUES (1,'2');
INSERT 1
SELECT * FROM alter_column_other;
 a | b | c 
---+---+---
 1 | 2 | 3 
 1 | 2 | 5 
(2 rows)

--------------------------------------------------------------------------------
-- Test if column rewrite works after vacuum on deleted rows
--------------------------------------------------------------------------------
CREATE TABLE alter_column_vacuum(a int, b int) using ao_column;
CREATE
INSERT INTO alter_column_vacuum SELECT 1,i FROM generate_series(1,1000)i;
INSERT 1000
DELETE FROM alter_column_vacuum WHERE b>10;
DELETE 990
VACUUM alter_column_vacuum;
VACUUM
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_vacuum');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 0        | 0   | 0                | 2        | 3             | 1     
 1          | 1     | 1          | 129            | 0        | 0   | 0                | 2        | 3             | 1     
 1          | 2     | 0          | 2              | 10       | 80  | 80               | 0        | 3             | 1     
 1          | 2     | 1          | 130            | 10       | 80  | 80               | 0        | 3             | 1     
(4 rows)
-- should succeed
ALTER TABLE alter_column_vacuum ALTER COLUMN b TYPE text;
ALTER
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_vacuum');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 0        | 0   | 0                | 2        | 3             | 1     
 1          | 1     | 1          | 204929         | 0        | 0   | 0                | 2        | 3             | 1     
 1          | 2     | 0          | 2              | 10       | 80  | 80               | 1        | 3             | 1     
 1          | 2     | 1          | 204930         | 10       | 64  | 64               | 1        | 3             | 1     
(4 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE works correctly when constraints are involved
--------------------------------------------------------------------------------
CREATE TABLE alter_column_constraints(a int, b int check (b > 0)) USING ao_column;
CREATE
INSERT INTO alter_column_constraints SELECT i,i FROM generate_series(1,10)i;
INSERT 10
-- should error
ALTER TABLE alter_column_constraints ALTER COLUMN b TYPE text;
ERROR:  operator does not exist: text > integer
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-- should succeed, and constraint remains
EXECUTE capturerelfilenodebefore ('alter_column_constraints_col_rewrite', 'alter_column_constraints');
EXECUTE 4
ALTER TABLE alter_column_constraints ALTER COLUMN b TYPE bigint;
ALTER
EXECUTE checkrelfilenodediff ('alter_column_constraints_col_rewrite', 'alter_column_constraints');
 segid | casename                             | relname                  | rewritten 
-------+--------------------------------------+--------------------------+-----------
 2     | alter_column_constraints_col_rewrite | alter_column_constraints | f         
 -1    | alter_column_constraints_col_rewrite | alter_column_constraints | f         
 0     | alter_column_constraints_col_rewrite | alter_column_constraints | f         
 1     | alter_column_constraints_col_rewrite | alter_column_constraints | f         
(4 rows)

EXECUTE capturerelfilenodebefore ('alter_column_constraints_fullrewrite', 'alter_column_constraints');
EXECUTE 4
-- should succeed and relfile changed (not using the column rewrite optimization because there's other command)
ALTER TABLE alter_column_constraints ADD CONSTRAINT checkb2 CHECK (b < 100), ALTER COLUMN b TYPE int;
ALTER
EXECUTE checkrelfilenodediff ('alter_column_constraints_fullrewrite', 'alter_column_constraints');
 segid | casename                             | relname                  | rewritten 
-------+--------------------------------------+--------------------------+-----------
 -1    | alter_column_constraints_fullrewrite | alter_column_constraints | t         
 0     | alter_column_constraints_fullrewrite | alter_column_constraints | t         
 1     | alter_column_constraints_fullrewrite | alter_column_constraints | t         
 2     | alter_column_constraints_fullrewrite | alter_column_constraints | t         
(4 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE works correctly when seg0 has some data
-- Check if we handle rewrite on seg0
--------------------------------------------------------------------------------
CREATE TABLE alter_column_seg0(a int, b int) USING ao_column;
CREATE
1: BEGIN;
BEGIN
1: ALTER TABLE alter_column_seg0 ADD COLUMN c int;
ALTER
1: INSERT INTO alter_column_seg0 SELECT 1,i,i FROM generate_series(1,10)i;
INSERT 10
1: COMMIT;
COMMIT
INSERT INTO alter_column_seg0 SELECT 1,i,i FROM generate_series(1,10)i;
INSERT 10
ALTER TABLE alter_column_seg0 ALTER COLUMN b TYPE text;
ALTER
SELECT count(*) FROM alter_column_seg0;
 count 
-------
 20    
(1 row)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_seg0');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 0     | 0          | 0              | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 0     | 1          | 204928         | 10       | 64  | 64               | 2        | 3             | 1     
 1          | 0     | 2          | 256            | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 1     | 0          | 1              | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 1     | 1          | 204929         | 10       | 64  | 64               | 2        | 3             | 1     
 1          | 1     | 2          | 257            | 10       | 80  | 80               | 2        | 3             | 1     
(6 rows)
DROP TABLE alter_column_seg0;
DROP
CHECKPOINT;
CHECKPOINT
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'alter_column_seg0');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE works correctly multiple segfiles are created
-- due to multiple concurrency
-- Check if we handle rewrite on each segfile correctly
--------------------------------------------------------------------------------
CREATE TABLE alter_column_multiple_concurrency(a int, b int) USING ao_column;
CREATE
1: BEGIN;
BEGIN
2: BEGIN;
BEGIN
1: INSERT INTO alter_column_multiple_concurrency SELECT 1,i FROM generate_series(1,10)i;
INSERT 10
2: INSERT INTO alter_column_multiple_concurrency SELECT 1,i FROM generate_series(1,10)i;
INSERT 10
1: COMMIT;
COMMIT
2: COMMIT;
COMMIT
ALTER TABLE alter_column_multiple_concurrency ALTER COLUMN b TYPE text;
ALTER
SELECT count(*) FROM alter_column_multiple_concurrency;
 count 
-------
 20    
(1 row)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_multiple_concurrency');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 1     | 1          | 204929         | 10       | 64  | 64               | 2        | 3             | 1     
 1          | 2     | 0          | 2              | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 2     | 1          | 204930         | 10       | 64  | 64               | 2        | 3             | 1     
(4 rows)
DROP TABLE alter_column_multiple_concurrency;
DROP
CHECKPOINT;
CHECKPOINT
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'alter_column_multiple_concurrency');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE works correctly when a segfile is in AWAITING_DROP state
-- Check if we handle rewrite on each segfile correctly
--------------------------------------------------------------------------------
CREATE TABLE alter_column_awaiting_drop(a int, b int) USING ao_column;
CREATE
1: BEGIN;
BEGIN
2: BEGIN;
BEGIN
1: INSERT INTO alter_column_awaiting_drop SELECT 1,i FROM generate_series(1,10)i;
INSERT 10
2: INSERT INTO alter_column_awaiting_drop SELECT 1,i FROM generate_series(11,20)i;
INSERT 10
1: COMMIT;
COMMIT
2: COMMIT;
COMMIT
DELETE FROM alter_column_awaiting_drop WHERE b > 10;
DELETE 10
VACUUM alter_column_awaiting_drop;
VACUUM
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_awaiting_drop');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 1     | 1          | 129            | 10       | 80  | 80               | 2        | 3             | 1     
 1          | 2     | 0          | 2              | 0        | 0   | 0                | 1        | 3             | 1     
 1          | 2     | 1          | 130            | 0        | 0   | 0                | 1        | 3             | 1     
 1          | 3     | 0          | 3              | 0        | 0   | 0                | 0        | 3             | 1     
 1          | 3     | 1          | 131            | 0        | 0   | 0                | 0        | 3             | 1     
(6 rows)
ALTER TABLE alter_column_awaiting_drop ALTER COLUMN b TYPE text;
ALTER
SELECT count(*) FROM alter_column_awaiting_drop;
 count 
-------
 10    
(1 row)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_awaiting_drop');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 10       | 80  | 80               | 3        | 3             | 1     
 1          | 1     | 1          | 204929         | 10       | 64  | 64               | 3        | 3             | 1     
 1          | 2     | 0          | 2              | 0        | 0   | 0                | 1        | 3             | 1     
 1          | 2     | 1          | 204930         | 0        | 0   | 0                | 1        | 3             | 1     
 1          | 3     | 0          | 3              | 0        | 0   | 0                | 0        | 3             | 1     
 1          | 3     | 1          | 204931         | 0        | 0   | 0                | 0        | 3             | 1     
(6 rows)
DROP TABLE alter_column_awaiting_drop;
DROP
CHECKPOINT;
CHECKPOINT
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'alter_column_awaiting_drop');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE works correctly for 0 inserted rows
--------------------------------------------------------------------------------
CREATE TABLE alter_column_zero_tupcount(a int, b int) USING ao_column;
CREATE
1: BEGIN;
BEGIN
2: BEGIN;
BEGIN
1: INSERT INTO alter_column_zero_tupcount SELECT 1,i FROM generate_series(1,10)i;
INSERT 10
2: INSERT INTO alter_column_zero_tupcount SELECT 1,i FROM generate_series(1,10)i;
INSERT 10
1: ABORT;
ABORT
2: ABORT;
ABORT
ALTER TABLE alter_column_zero_tupcount ALTER COLUMN b TYPE text;
ALTER
SELECT count(*) FROM alter_column_zero_tupcount;
 count 
-------
 0     
(1 row)
SELECT * FROM gp_toolkit.__gp_aocsseg('alter_column_zero_tupcount');
 segment_id | segno | column_num | physical_segno | tupcount | eof | eof_uncompressed | modcount | formatversion | state 
------------+-------+------------+----------------+----------+-----+------------------+----------+---------------+-------
 1          | 1     | 0          | 1              | 0        | 0   | 0                | 0        | 3             | 1     
 1          | 1     | 1          | 204929         | 0        | 0   | 0                | 0        | 3             | 1     
 1          | 2     | 0          | 2              | 0        | 0   | 0                | 0        | 3             | 1     
 1          | 2     | 1          | 204930         | 0        | 0   | 0                | 0        | 3             | 1     
(4 rows)
DROP TABLE alter_column_zero_tupcount;
DROP
CHECKPOINT;
CHECKPOINT
SELECT * FROM gp_toolkit.gp_check_orphaned_files WHERE split_part(filename,'.',1) = (SELECT oid::text FROM pg_class WHERE relname = 'alter_column_zero_tupcount');
 gp_segment_id | tablespace | filename 
---------------+------------+----------
(0 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE works correctly for generated columns.
-- Check if we error out on ALTERing type columns that have dependent generated columns
--------------------------------------------------------------------------------
CREATE TABLE alter_column_generated_cols(a int, b int, c int GENERATED ALWAYS AS (a+b) STORED, d int GENERATED ALWAYS AS (tableoid::regclass) STORED) USING ao_column;
CREATE
INSERT INTO alter_column_generated_cols SELECT 1,i FROM generate_series(1,5)i;
INSERT 5
SELECT attname, atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_generated_cols'::regclass and attname in ('b','c','d');
 attname | atttypid 
---------+----------
 b       | integer  
 c       | integer  
 d       | integer  
(3 rows)
-- b shouldn't be allowed for alter type
ALTER TABLE alter_column_generated_cols ALTER COLUMN b TYPE text;
ERROR:  cannot alter type of a column used by a generated column
DETAIL:  Column "b" is used by generated column "c".
SELECT attname, atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_generated_cols'::regclass and attname in ('b','c','d');
 attname | atttypid 
---------+----------
 b       | integer  
 c       | integer  
 d       | integer  
(3 rows)
ALTER TABLE alter_column_generated_cols ALTER COLUMN c TYPE text;
ALTER
SELECT attname, atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_generated_cols'::regclass and attname in ('b','c','d');
 attname | atttypid 
---------+----------
 b       | integer  
 c       | text     
 d       | integer  
(3 rows)
ALTER TABLE alter_column_generated_cols ALTER COLUMN d TYPE text;
ALTER
SELECT attname, atttypid::regtype FROM pg_attribute WHERE attrelid='alter_column_generated_cols'::regclass and attname in ('b','c','d');
 attname | atttypid 
---------+----------
 b       | integer  
 c       | text     
 d       | text     
(3 rows)

--------------------------------------------------------------------------------
-- Test if ALTER COLUMN TYPE blocks concurrent INSERT, and vice versa
--------------------------------------------------------------------------------
CREATE TABLE aoco_concurrent_inserts(a int, b int, c int) USING ao_column;
CREATE
INSERT INTO aoco_concurrent_inserts SELECT i,i,i FROM generate_series(1,10)i;
INSERT 10
1: BEGIN;
BEGIN
1: INSERT INTO aoco_concurrent_inserts SELECT i,i,i FROM generate_series(1,10)i;
INSERT 10
1: END;
END
2&: ALTER TABLE aoco_concurrent_inserts ALTER COLUMN b TYPE text;  <waiting ...>
FAILED:  Forked command is not blocking; got output: ALTER
1: END;
END
2<:  <... completed>
FAILED:  Execution failed
-- should see 20 rows
SELECT count(*) FROM aoco_concurrent_inserts;
 count 
-------
 20    
(1 row)
1: BEGIN;
BEGIN
1: ALTER TABLE aoco_concurrent_inserts ALTER COLUMN c TYPE text;
ALTER
2&: INSERT INTO aoco_concurrent_inserts SELECT i,i,i FROM generate_series(1,10)i;  <waiting ...>
1: END;
END
2<:  <... completed>
INSERT 10
-- should see 30 rows
SELECT count(*) FROM aoco_concurrent_inserts;
 count 
-------
 30    
(1 row)
