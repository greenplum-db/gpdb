-- test WaitEvent related logic, the specific event will be watched in pg_stat_activity

create table test_waitevent(i int);
CREATE
insert into test_waitevent select generate_series(1,1000);
INSERT 1000
create extension if not exists gp_inject_fault;
CREATE

1: set optimizer = off;
SET
1: set gp_cte_sharing to on;
SET
1: select gp_inject_fault_infinite('shareinput_writer_notifyready', 'suspend', 2);
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
1&: WITH a1 as (select * from test_waitevent), a2 as (select * from test_waitevent) SELECT sum(a1.i)  FROM a1 INNER JOIN a2 ON a2.i = a1.i  UNION ALL SELECT count(a1.i)  FROM a1 INNER JOIN a2 ON a2.i = a1.i;  <waiting ...>
-- start_ignore
2: copy (select pg_stat_get_activity(NULL) from gp_dist_random('gp_id') where gp_segment_id=0) to '/tmp/_gpdb_test_output.txt';
COPY 9
-- end_ignore
2: select gp_wait_until_triggered_fault('shareinput_writer_notifyready', 1, 2);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
2: select gp_inject_fault_infinite('shareinput_writer_notifyready', 'resume', 2);
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
2: select gp_inject_fault_infinite('shareinput_writer_notifyready', 'reset', 2);
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
2q: ... <quitting>
1<:  <... completed>
 sum    
--------
 500500 
 1000   
(2 rows)
1q: ... <quitting>

!\retcode grep ShareInputScan /tmp/_gpdb_test_output.txt;
-- start_ignore
(100897,9460,10,"",active,"WITH a1 as (select * from test_waitevent), a2 as (select * from test_waitevent) SELECT sum(a1.i)  FROM a1 INNER JOIN a2 ON a2.i = a1.i  UNION ALL SELECT count(a1.i)  FROM a1 INNER JOIN a2 ON a2.i = a1.i;",IPC,ShareInputScan,"Sat Mar 12 23:51:16.151757 2022 PST","Sat Mar 12 23:51:16.151757 2022 PST","Sat Mar 12 23:51:16.14545 2022 PST","Sat Mar 12 23:51:16.151797 2022 PST",127.0.0.1,,63602,,7398,"client backend",f,,,,,,,,f,,f,247,0,unknown)

-- end_ignore
(exited with code 0)

