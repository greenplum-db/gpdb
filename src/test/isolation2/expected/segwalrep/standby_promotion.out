-- This test is the master prober version of mirror_promotion
--
-- Tests standby promotion triggered by FTS in 2 different scenarios.
--
-- 1st: Shut-down of master and hence unavailability of master
-- leading to standby promotion. In this case the connection between
-- master and standby is disconnected prior to promotion and
-- walreceiver doesn't exist.
--
-- 2nd: Master is alive but using fault injector simulated to not
-- respond to fts. This helps to validate fts time-out logic for
-- probes. Plus also standby promotion triggered while connection
-- between master and standby is still alive and hence walreceiver
-- also exist during promotion.
--
-- This test assumes master port is 15432 and standby port is 16432

create extension if not exists gp_inject_fault;
CREATE

include: helpers/server_helpers.sql;
CREATE

-- set GUCs to speed-up the test
!\retcode gpconfig -c gp_fts_probe_retries -v 2;
-- start_ignore
20190109:08:10:20:094396 gpconfig:master:gpadmin-[INFO]:-completed successfully with parameters '-c gp_fts_probe_retries -v 2'

-- end_ignore
(exited with code 0)
!\retcode gpconfig -c gp_fts_probe_timeout -v 5;
-- start_ignore
20190109:08:10:22:094489 gpconfig:master:gpadmin-[INFO]:-completed successfully with parameters '-c gp_fts_probe_timeout -v 5'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20190109:08:10:22:094582 gpstop:master:gpadmin-[INFO]:-Starting gpstop with args: -u
20190109:08:10:22:094582 gpstop:master:gpadmin-[INFO]:-Gathering information and validating the environment...
20190109:08:10:22:094582 gpstop:master:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20190109:08:10:22:094582 gpstop:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20190109:08:10:22:094582 gpstop:master:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.15487.g3e2a28223b build dev-oss'
20190109:08:10:22:094582 gpstop:master:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore
(exited with code 0)

-- Test 1
-- cache session on seg0 where master prober on it
0U: select 1;
 ?column? 
----------
 1        
(1 row)

-- show the master information
SELECT role, preferred_role, content, port, mode, status FROM gp_segment_configuration where content=-1;
 role | preferred_role | content | port  | mode | status 
------+----------------+---------+-------+------+--------
 p    | p              | -1      | 15432 | s    | u      
 m    | m              | -1      | 16432 | s    | u      
(2 rows)

-- stop master in order to trigger standby promotion
select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=-1), 'stop');
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.

-- trigger failover
0U: select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- As master is down, standby has been promoted, connect to the new master
1: \c 16432; -- the preferred master is down
-- the preferred standby is master and it's up and not-in-sync
1: select content, preferred_role, role, status, mode from gp_segment_configuration where content = -1;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 -1      | m              | p    | u      | n    
 -1      | p              | m    | d      | n    
(2 rows)

-- recover the preferred master as standby
!\retcode MASTER_DATA_DIRECTORY=`psql -p 16432 postgres -At -c "select datadir from gp_segment_configuration where content=-1 and role='p'"` gprecoverseg -a -d `psql -p 16432 postgres -At -c "select datadir from gp_segment_configuration where content=-1 and role='p'"`;
-- start_ignore
20190109:08:10:25:094659 gprecoverseg:master:gpadmin-[INFO]:-Starting gprecoverseg with args: -a -d /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/standby
20190109:08:10:25:094659 gprecoverseg:master:gpadmin-[INFO]:-local Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.15487.g3e2a28223b build dev-oss'
20190109:08:10:25:094659 gprecoverseg:master:gpadmin-[INFO]:-master Greenplum Version: 'PostgreSQL 9.4.20 (Greenplum Database 6.0.0-alpha.0+dev.15487.g3e2a28223b build dev-oss) on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 6.2.0, 64-bit compiled on Jan  9 2019 04:27:13 (with assert checking)'
20190109:08:10:25:094659 gprecoverseg:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-Heap checksum setting is consistent between master and the segments that are candidates for recoverseg
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-Greenplum instance recovery parameters
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-Recovery type              = Standard
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-Recovery 1 of 1
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Synchronization mode                 = Incremental
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance host                 = master
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance address              = master
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance directory            = /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance port                 = 15432
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance host        = master
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance address     = master
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance directory   = /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/standby
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance port        = 16432
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Target                      = in-place
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-1 segment(s) to recover
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-Ensuring 1 failed segment(s) are stopped
 
20190109:08:10:26:094659 gprecoverseg:master:gpadmin-[INFO]:-Ensuring that shared memory is cleaned up for stopped segments
20190109:08:10:27:094659 gprecoverseg:master:gpadmin-[INFO]:-Updating mirrors
20190109:08:10:27:094659 gprecoverseg:master:gpadmin-[INFO]:-Running pg_rewind on required mirrors
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-Starting mirrors
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-era is None
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-Triggering FTS probe
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-******************************************************************
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-Updating segments for streaming is completed.
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-For segments updated successfully, streaming will continue in the background.
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-Use  gpstate -s  to check the streaming progress.
20190109:08:10:30:094659 gprecoverseg:master:gpadmin-[INFO]:-******************************************************************

-- end_ignore
(exited with code 0)

-- loop while segments come in sync
1: do $$ begin /* in func */ for i in 1..120 loop /* in func */ if (select mode = 's' from gp_segment_configuration where content = 1 limit 1) then /* in func */ return; /* in func */ end if; /* in func */ perform gp_request_fts_probe_scan(); /* in func */ end loop; /* in func */ end; /* in func */ $$;
DO

-- roles flipped and in sync
1: select content, preferred_role, role, status, mode from gp_segment_configuration where content = -1;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 -1      | m              | p    | u      | s    
 -1      | p              | m    | u      | s    
(2 rows)

-- Test 2
-- inject fts handler to simulate fts probe timeout
1: select gp_inject_fault_infinite('fts_handle_message', 'infinite_loop', dbid) from gp_segment_configuration where content = -1 and role = 'p';
 gp_inject_fault_infinite 
--------------------------
 t                        
(1 row)

-- trigger failover
0U: show gp_fts_probe_retries;
 gp_fts_probe_retries 
----------------------
 2                    
(1 row)
0U: show gp_fts_probe_timeout;
 gp_fts_probe_timeout 
----------------------
 5s                   
(1 row)
0U: select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- trigger one more probe right away which mostly results in sending
-- promotion request again to standby, while its going through
-- promotion, which is nice condition to test as well.
0U: select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- start a new connection to port 15432
-- expect preferred master is up and standby is down
2: select content, preferred_role, role, status, mode from gp_segment_configuration where content = -1;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 -1      | p              | p    | u      | n    
 -1      | m              | m    | d      | n    
(2 rows)

-- shutdown the standby
2: select pg_ctl((select datadir from gp_segment_configuration c where c.role='m' and c.content=-1), 'stop');
 pg_ctl                                               
------------------------------------------------------
 waiting for server to shut down done
server stopped
 
(1 row)

-- recover the standby
!\retcode gprecoverseg -a;
-- start_ignore
20190109:08:10:51:094899 gprecoverseg:master:gpadmin-[INFO]:-Starting gprecoverseg with args: -a
20190109:08:10:51:094899 gprecoverseg:master:gpadmin-[INFO]:-local Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.15487.g3e2a28223b build dev-oss'
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-master Greenplum Version: 'PostgreSQL 9.4.20 (Greenplum Database 6.0.0-alpha.0+dev.15487.g3e2a28223b build dev-oss) on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 6.2.0, 64-bit compiled on Jan  9 2019 04:27:13 (with assert checking)'
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-Heap checksum setting is consistent between master and the segments that are candidates for recoverseg
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-Greenplum instance recovery parameters
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-Recovery type              = Standard
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-Recovery 1 of 1
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Synchronization mode                 = Incremental
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance host                 = master
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance address              = master
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance directory            = /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/standby
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance port                 = 16432
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance host        = master
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance address     = master
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance directory   = /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance port        = 15432
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Target                      = in-place
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-1 segment(s) to recover
20190109:08:10:52:094899 gprecoverseg:master:gpadmin-[INFO]:-Ensuring 1 failed segment(s) are stopped
 
20190109:08:10:53:094899 gprecoverseg:master:gpadmin-[INFO]:-Ensuring that shared memory is cleaned up for stopped segments
20190109:08:10:53:094899 gprecoverseg:master:gpadmin-[INFO]:-Updating mirrors
20190109:08:10:53:094899 gprecoverseg:master:gpadmin-[INFO]:-Running pg_rewind on required mirrors
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-Starting mirrors
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-era is None
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-Triggering FTS probe
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-******************************************************************
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-Updating segments for streaming is completed.
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-For segments updated successfully, streaming will continue in the background.
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-Use  gpstate -s  to check the streaming progress.
20190109:08:10:56:094899 gprecoverseg:master:gpadmin-[INFO]:-******************************************************************

-- end_ignore
(exited with code 0)

-- master and standby are up and in-sync
2: select content, preferred_role, role, status, mode from gp_segment_configuration where content = -1;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 -1      | p              | p    | u      | s    
 -1      | m              | m    | u      | s    
(2 rows)

-- set GUCs to speed-up the test
!\retcode gpconfig -r gp_fts_probe_retries;
-- start_ignore
20190109:08:10:58:095079 gpconfig:master:gpadmin-[INFO]:-completed successfully with parameters '-r gp_fts_probe_retries'

-- end_ignore
(exited with code 0)
!\retcode gpconfig -r gp_fts_probe_timeout;
-- start_ignore
20190109:08:10:59:095163 gpconfig:master:gpadmin-[INFO]:-completed successfully with parameters '-r gp_fts_probe_timeout'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20190109:08:10:59:095248 gpstop:master:gpadmin-[INFO]:-Starting gpstop with args: -u
20190109:08:10:59:095248 gpstop:master:gpadmin-[INFO]:-Gathering information and validating the environment...
20190109:08:10:59:095248 gpstop:master:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information
20190109:08:10:59:095248 gpstop:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20190109:08:11:00:095248 gpstop:master:gpadmin-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.15487.g3e2a28223b build dev-oss'
20190109:08:11:00:095248 gpstop:master:gpadmin-[INFO]:-Signalling all postmaster processes to reload
. 

-- end_ignore
(exited with code 0)
