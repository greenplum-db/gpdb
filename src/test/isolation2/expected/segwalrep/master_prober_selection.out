-- Tests master prober selection
--
-- When the master prober segment is down, master will
-- start another master prober on another segment if
-- master and standby are in-sync.
--

include: helpers/server_helpers.sql;
CREATE

create extension if not exists gp_inject_fault;
CREATE

select dbid, content from gp_segment_configuration where master_prober='t';
 dbid | content 
------+---------
 2    | 0       
(1 row)

-- stop standby
select pg_ctl(datadir, 'stop') from gp_segment_configuration where content=-1 and role='m';
 pg_ctl                                               
------------------------------------------------------
 waiting for server to shut down done
server stopped
 
(1 row)
-- trigger master prober
0U: select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
-- wait master get unblocked by master prober
begin;end;
BEGIN;END
-- stop master prober segment
select pg_ctl(datadir, 'stop') from gp_segment_configuration where master_prober='t';
 pg_ctl                                               
------------------------------------------------------
 waiting for server to shut down done
server stopped
 
(1 row)
-- trigger manual probe
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
-- we will see the master prober is not changed
select dbid, content from gp_segment_configuration where master_prober='t';
 dbid | content 
------+---------
 2    | 0       
(1 row)
-- start standby
select pg_ctl_start(datadir, port, content, dbid) from gp_segment_configuration where content=-1 and role='m';
 pg_ctl_start     
------------------
 server starting
 
(1 row)
-- wait standby is in-sync
do $$ begin /* in func */ for i in 1..120 loop /* in func */ if (select sync_state='sync' from pg_stat_replication) then /* in func */ return; /* in func */ end if; /* in func */ perform gp_request_fts_probe_scan(); /* in func */ end loop; /* in func */ end; /* in func */ $$;
DO
-- and trigger manual probe
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
-- there's a new master prober
select dbid, content from gp_segment_configuration where master_prober='t';
 dbid | content 
------+---------
 5    | 0       
(1 row)

-- fully recover the failed primary as new mirror
!\retcode gprecoverseg -aF;
-- start_ignore
20190109:09:44:40:200837 gprecoverseg:master:gpadmin-[INFO]:-Starting gprecoverseg with args: -aF
20190109:09:44:40:200837 gprecoverseg:master:gpadmin-[INFO]:-local Greenplum Version: 'postgres (Greenplum Database) 6.0.0-alpha.0+dev.15488.g9e6c513cb5 build dev-oss'
20190109:09:44:40:200837 gprecoverseg:master:gpadmin-[INFO]:-master Greenplum Version: 'PostgreSQL 9.4.20 (Greenplum Database 6.0.0-alpha.0+dev.15488.g9e6c513cb5 build dev-oss) on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 6.2.0, 64-bit compiled on Jan  9 2019 08:37:15 (with assert checking)'
20190109:09:44:40:200837 gprecoverseg:master:gpadmin-[INFO]:-Obtaining Segment details from master...
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-Heap checksum setting is consistent between master and the segments that are candidates for recoverseg
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-Greenplum instance recovery parameters
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-Recovery type              = Standard
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-Recovery 1 of 1
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Synchronization mode                 = Full
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance host                 = master
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance address              = master
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance directory            = /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/dbfast1/demoDataDir0
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Failed instance port                 = 25432
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance host        = master
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance address     = master
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance directory   = /home/gpadmin/workspace/gpdb/gpAux/gpdemo/datadirs/dbfast_mirror1/demoDataDir0
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Source instance port        = 25435
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-   Recovery Target                      = in-place
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:----------------------------------------------------------
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-1 segment(s) to recover
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-Ensuring 1 failed segment(s) are stopped
 
20190109:09:44:41:200837 gprecoverseg:master:gpadmin-[INFO]:-Ensuring that shared memory is cleaned up for stopped segments
20190109:09:44:42:200837 gprecoverseg:master:gpadmin-[INFO]:-Validating remote directories
. 
20190109:09:44:43:200837 gprecoverseg:master:gpadmin-[INFO]:-Configuring new segments
. 
20190109:09:44:44:200837 gprecoverseg:master:gpadmin-[INFO]:-Updating mirrors
20190109:09:44:44:200837 gprecoverseg:master:gpadmin-[INFO]:-Starting mirrors
20190109:09:44:44:200837 gprecoverseg:master:gpadmin-[INFO]:-era is None
20190109:09:44:44:200837 gprecoverseg:master:gpadmin-[INFO]:-Commencing parallel segment instance startup, please wait...
. 
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-Process results...
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-Triggering FTS probe
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-******************************************************************
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-Updating segments for streaming is completed.
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-For segments updated successfully, streaming will continue in the background.
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-Use  gpstate -s  to check the streaming progress.
20190109:09:44:45:200837 gprecoverseg:master:gpadmin-[INFO]:-******************************************************************

-- end_ignore
(exited with code 0)
-- trigger failover
select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
-- expect: to see roles flipped and in sync
select content, preferred_role, role, status, mode, master_prober from gp_segment_configuration;
 content | preferred_role | role | status | mode | master_prober 
---------+----------------+------+--------+------+---------------
 1       | p              | p    | u      | s    | f             
 1       | m              | m    | u      | s    | f             
 2       | p              | p    | u      | s    | f             
 2       | m              | m    | u      | s    | f             
 -1      | p              | p    | u      | s    | f             
 -1      | m              | m    | u      | s    | f             
 0       | m              | p    | u      | s    | t             
 0       | p              | m    | u      | s    | f             
(8 rows)
