-- @Description Ensures that a select after a vacuum operation is ok
-- 
DROP TABLE IF EXISTS ao;
DROP
DROP TABLE IF EXISTS ao2;
DROP
CREATE TABLE ao2 (a INT) WITH (appendonly=true, orientation=@orientation@);
CREATE
CREATE TABLE ao (a INT) WITH (appendonly=true, orientation=@orientation@);
CREATE
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao select generate_series(1,1000);
INSERT 1000
insert into ao2 select generate_series(1,1000);
INSERT 1000

DROP VIEW IF EXISTS locktest;
DROP
create view locktest as select coalesce( case when relname like 'pg_toast%index' then 'toast index' when relname like 'pg_toast%' then 'toast table' else relname end, 'dropped table'), mode, locktype from pg_locks l left outer join pg_class c on (l.relation = c.oid), pg_database d where relation is not null and l.database = d.oid and l.gp_segment_id = -1 and relname != 'gp_fault_strategy' and d.datname = current_database() order by 1, 3, 2;
CREATE

-- The actual test begins
DELETE FROM ao WHERE a < 128;
DELETE 2667
1: BEGIN;
BEGIN
1: SELECT COUNT(*) FROM ao2;
count
-----
1000 
(1 row)
2U: SELECT segno, case when tupcount = 0 then 'zero' when tupcount = 1 then 'one' when tupcount <= 5 then 'few' else 'many' end FROM gp_ao_or_aocs_seg_name('ao');
segno|case
-----+----
1    |many
(1 row)
2: VACUUM ao;
VACUUM
1: SELECT COUNT(*) FROM ao;
count
-----
18333
(1 row)
1: SELECT * FROM locktest WHERE coalesce = 'ao';
coalesce|mode           |locktype
--------+---------------+--------
ao      |AccessShareLock|relation
(1 row)
1: COMMIT;
COMMIT
1: SELECT COUNT(*) FROM ao;
count
-----
18333
(1 row)
3: INSERT INTO ao VALUES (0);
INSERT 1
2U: SELECT segno, case when tupcount = 0 then 'zero' when tupcount = 1 then 'one' when tupcount <= 5 then 'few' else 'many' end FROM gp_ao_or_aocs_seg_name('ao');
segno|case
-----+----
1    |zero
2    |many
(2 rows)
