drop schema if exists agg_sort_distinct_regress_schema cascade;
NOTICE:  schema "agg_sort_distinct_regress_schema" does not exist, skipping
create schema if not exists agg_sort_distinct_regress_schema;
set search_path to agg_sort_distinct_regress_schema;
create table test_multi_order_agg(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into test_multi_order_agg values (1, 1), (1, null), (null, 1);
set gp_enable_sort_distinct to on;
select string_agg(a::text, ','), string_agg(distinct b::text, ',') from test_multi_order_agg;
 string_agg | string_agg 
------------+------------
 1,1        | 1
(1 row)

select string_agg(a::text, ',' order by b), string_agg(distinct b::text, ',') from test_multi_order_agg;
 string_agg | string_agg 
------------+------------
 1,1        | 1
(1 row)

set gp_enable_sort_distinct to off;
select string_agg(a::text, ','), string_agg(distinct b::text, ',') from test_multi_order_agg;
 string_agg | string_agg 
------------+------------
 1,1        | 1
(1 row)

select string_agg(a::text, ',' order by b), string_agg(distinct b::text, ',') from test_multi_order_agg;
 string_agg | string_agg 
------------+------------
 1,1        | 1
(1 row)


