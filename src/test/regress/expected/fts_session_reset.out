-- set these values purely to cut down test time, as default ts trigger is
-- every min and 5 retries
alter system set gp_fts_probe_interval to 10;
alter system set gp_fts_probe_retries to 0;
select pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

create table test_fts_session_reset(c1 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
BEGIN;
insert into test_fts_session_reset select * from generate_series(1,20);
select dbid as id from gp_segment_configuration where content=0 and role = 'p' \gset db
select gp_inject_fault('fts_conn_startup_packet', 'fatal', :dbid) ;
 gp_inject_fault 
-----------------
 Success:
(1 row)

select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t
(1 row)

do $$
begin
  for i in 1..120 loop
    if (select status = 'd' from gp_segment_configuration where content = 0 and role = 'm') then
      return;
    end if;
    perform pg_sleep(1);
  end loop;
end;
$$;
insert into test_fts_session_reset select * from generate_series(21,40);
ERROR:  gang was lost due to cluster reconfiguration (cdbgang_async.c:94)
select count(*) from test_fts_session_reset;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
commit;
select count(*) from test_fts_session_reset;
 count 
-------
     0
(1 row)

select gp_inject_fault('fts_conn_startup_packet', 'reset', :dbid);
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- start_ignore
-- Wait until content 0 mirror is promoted otherwise, gprecoverseg
-- that runs after will fail.
do $$
declare
  y int;
begin
  for i in 1..120 loop
    begin
      select count(*) into y from gp_dist_random('gp_id');
      raise notice 'got % results, mirror must have been promoted', y;
      return;
    exception
      when others then
        raise notice 'mirror may not be promoted yet: %', sqlerrm;
        perform pg_sleep(0.5);
    end;
  end loop;
end;
$$;
NOTICE:  got 3 results, mirror must have been promoted
\! gprecoverseg -av --no-progress
-- end_ignore
-- loop while segments come in sync
do $$
begin
  for i in 1..120 loop
    if (select count(*) = 0 from gp_segment_configuration where content = 0 and mode != 's') then
      return;
    end if;
    perform gp_request_fts_probe_scan();
  end loop;
end;
$$;
select role, preferred_role, mode, status from gp_segment_configuration where content = 0;
 role | preferred_role | mode | status 
------+----------------+------+--------
 p    | m              | s    | u
 m    | p              | s    | u
(2 rows)

-- start_ignore
\! gprecoverseg -arv
-- end_ignore
-- loop while segments come in sync
do $$
begin
  for i in 1..120 loop
    if (select count(*) = 0 from gp_segment_configuration where content = 0 and mode != 's') then
      return;
    end if;
    perform gp_request_fts_probe_scan();
  end loop;
end;
$$;
select role, preferred_role, mode, status from gp_segment_configuration where content = 0;
 role | preferred_role | mode | status 
------+----------------+------+--------
 p    | p              | s    | u
 m    | m              | s    | u
(2 rows)

alter system reset gp_fts_probe_interval;
alter system reset gp_fts_probe_retries;
select pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

-- cleanup steps
select gp_inject_fault('all', 'reset', dbid)
from gp_segment_configuration where content = 0 and role = 'p';
 gp_inject_fault 
-----------------
 Success:
(1 row)

