-- from http://www.depesz.com/index.php/2010/04/19/getting-unique-elements/
CREATE TEMP TABLE articles (
    id int CONSTRAINT articles_pkey PRIMARY KEY,
    keywords text,
    -- GPDB doesn't support having a PRIMARY KEY and UNIQUE constraints on the
    -- same table. Hence leave out the UNIQUE constraints.
    title text /* UNIQUE */ NOT NULL,
    body text /* UNIQUE */,
    created date
);
CREATE TEMP TABLE articles_in_category (
    article_id int,
    category_id int,
    changed date,
    PRIMARY KEY (article_id, category_id)
);
-- test functional dependencies based on primary keys/unique constraints
-- base tables
-- group by primary key (OK)
SELECT id, keywords, title, body, created
FROM articles
GROUP BY id;
 id | keywords | title | body | created 
----+----------+-------+------+---------
(0 rows)

-- group by unique not null (fail/todo)
SELECT id, keywords, title, body, created
FROM articles
GROUP BY title;
ERROR:  column "articles.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT id, keywords, title, body, created
               ^
-- group by unique nullable (fail)
SELECT id, keywords, title, body, created
FROM articles
GROUP BY body;
ERROR:  column "articles.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT id, keywords, title, body, created
               ^
-- group by something else (fail)
SELECT id, keywords, title, body, created
FROM articles
GROUP BY keywords;
ERROR:  column "articles.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT id, keywords, title, body, created
               ^
-- multiple tables
-- group by primary key (OK)
SELECT a.id, a.keywords, a.title, a.body, a.created
FROM articles AS a, articles_in_category AS aic
WHERE a.id = aic.article_id AND aic.category_id in (14,62,70,53,138)
GROUP BY a.id;
 id | keywords | title | body | created 
----+----------+-------+------+---------
(0 rows)

-- group by something else (fail)
SELECT a.id, a.keywords, a.title, a.body, a.created
FROM articles AS a, articles_in_category AS aic
WHERE a.id = aic.article_id AND aic.category_id in (14,62,70,53,138)
GROUP BY aic.article_id, aic.category_id;
ERROR:  column "a.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT a.id, a.keywords, a.title, a.body, a.created
               ^
-- JOIN syntax
-- group by left table's primary key (OK)
SELECT a.id, a.keywords, a.title, a.body, a.created
FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id
WHERE aic.category_id in (14,62,70,53,138)
GROUP BY a.id;
 id | keywords | title | body | created 
----+----------+-------+------+---------
(0 rows)

-- group by something else (fail)
SELECT a.id, a.keywords, a.title, a.body, a.created
FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id
WHERE aic.category_id in (14,62,70,53,138)
GROUP BY aic.article_id, aic.category_id;
ERROR:  column "a.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT a.id, a.keywords, a.title, a.body, a.created
               ^
-- group by right table's (composite) primary key (OK)
SELECT aic.changed
FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id
WHERE aic.category_id in (14,62,70,53,138)
GROUP BY aic.category_id, aic.article_id;
 changed 
---------
(0 rows)

-- group by right table's partial primary key (fail)
SELECT aic.changed
FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id
WHERE aic.category_id in (14,62,70,53,138)
GROUP BY aic.article_id;
ERROR:  column "aic.changed" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT aic.changed
               ^
-- example from documentation
CREATE TEMP TABLE products (product_id int, name text, price numeric);
CREATE TEMP TABLE sales (product_id int, units int);
-- OK
SELECT product_id, p.name, (sum(s.units) * p.price) AS sales
    FROM products p LEFT JOIN sales s USING (product_id)
    GROUP BY product_id, p.name, p.price;
 product_id | name | sales 
------------+------+-------
(0 rows)

-- fail
SELECT product_id, p.name, (sum(s.units) * p.price) AS sales
    FROM products p LEFT JOIN sales s USING (product_id)
    GROUP BY product_id;
ERROR:  column "p.name" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: SELECT product_id, p.name, (sum(s.units) * p.price) AS sales
                           ^
ALTER TABLE products ADD PRIMARY KEY (product_id);
-- OK now
SELECT product_id, p.name, (sum(s.units) * p.price) AS sales
    FROM products p LEFT JOIN sales s USING (product_id)
    GROUP BY product_id;
 product_id | name | sales 
------------+------+-------
(0 rows)

-- Drupal example, http://drupal.org/node/555530
CREATE TEMP TABLE node (
    nid SERIAL,
    vid integer NOT NULL default '0',
    type varchar(32) NOT NULL default '',
    title varchar(128) NOT NULL default '',
    uid integer NOT NULL default '0',
    status integer NOT NULL default '1',
    created integer NOT NULL default '0',
    -- snip
    PRIMARY KEY (nid, vid)
);
CREATE TEMP TABLE users (
    uid integer NOT NULL default '0',
    name varchar(60) NOT NULL default '',
    pass varchar(32) NOT NULL default '',
    -- snip
    PRIMARY KEY (uid)
    /* , UNIQUE (name) */
);
-- OK
SELECT u.uid, u.name FROM node n
INNER JOIN users u ON u.uid = n.uid
WHERE n.type = 'blog' AND n.status = 1
GROUP BY u.uid, u.name;
 uid | name 
-----+------
(0 rows)

-- OK
SELECT u.uid, u.name FROM node n
INNER JOIN users u ON u.uid = n.uid
WHERE n.type = 'blog' AND n.status = 1
GROUP BY u.uid;
 uid | name 
-----+------
(0 rows)

-- Check views and dependencies
-- fail
CREATE TEMP VIEW fdv1 AS
SELECT id, keywords, title, body, created
FROM articles
GROUP BY body;
ERROR:  column "articles.id" must appear in the GROUP BY clause or be used in an aggregate function
LINE 2: SELECT id, keywords, title, body, created
               ^
-- OK
CREATE TEMP VIEW fdv1 AS
SELECT id, keywords, title, body, created
FROM articles
GROUP BY id;
-- fail
ALTER TABLE articles DROP CONSTRAINT articles_pkey RESTRICT;
ERROR:  cannot drop constraint articles_pkey on table articles because other objects depend on it
DETAIL:  view fdv1 depends on constraint articles_pkey on table articles
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VIEW fdv1;
-- multiple dependencies
CREATE TEMP VIEW fdv2 AS
SELECT a.id, a.keywords, a.title, aic.category_id, aic.changed
FROM articles AS a JOIN articles_in_category AS aic ON a.id = aic.article_id
WHERE aic.category_id in (14,62,70,53,138)
GROUP BY a.id, aic.category_id, aic.article_id;
ALTER TABLE articles DROP CONSTRAINT articles_pkey RESTRICT; -- fail
ERROR:  cannot drop constraint articles_pkey on table articles because other objects depend on it
DETAIL:  view fdv2 depends on constraint articles_pkey on table articles
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
ALTER TABLE articles_in_category DROP CONSTRAINT articles_in_category_pkey RESTRICT; --fail
ERROR:  cannot drop constraint articles_in_category_pkey on table articles_in_category because other objects depend on it
DETAIL:  view fdv2 depends on constraint articles_in_category_pkey on table articles_in_category
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VIEW fdv2;
-- nested queries
CREATE TEMP VIEW fdv3 AS
SELECT id, keywords, title, body, created
FROM articles
GROUP BY id
UNION
SELECT id, keywords, title, body, created
FROM articles
GROUP BY id;
ALTER TABLE articles DROP CONSTRAINT articles_pkey RESTRICT; -- fail
ERROR:  cannot drop constraint articles_pkey on table articles because other objects depend on it
DETAIL:  view fdv3 depends on constraint articles_pkey on table articles
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VIEW fdv3;
CREATE TEMP VIEW fdv4 AS
SELECT * FROM articles WHERE title IN (SELECT title FROM articles GROUP BY id);
ALTER TABLE articles DROP CONSTRAINT articles_pkey RESTRICT; -- fail
ERROR:  cannot drop constraint articles_pkey on table articles because other objects depend on it
DETAIL:  view fdv4 depends on constraint articles_pkey on table articles
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VIEW fdv4;
-- prepared query plans: this results in failure on reuse
PREPARE foo AS
  SELECT id, keywords, title, body, created
  FROM articles
  GROUP BY id;
EXECUTE foo;
 id | keywords | title | body | created 
----+----------+-------+------+---------
(0 rows)

ALTER TABLE articles DROP CONSTRAINT articles_pkey RESTRICT;
EXECUTE foo;  -- fail
ERROR:  column "articles.keywords" must appear in the GROUP BY clause or be used in an aggregate function
-- OK, test GPDB case especially on multi-stage agg plan
set enable_groupagg = off;
set gp_eager_two_phase_agg = on;
create table funcdep1(a int primary key, b int, c int, d int);
create table funcdep2(a int, b int, c int, d int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into funcdep1 values(1,1,1,1);
insert into funcdep1 values(2,1,1,1);
insert into funcdep1 values(3,1,1,1);
insert into funcdep2 values(1,1,1,1);
insert into funcdep2 values(2,1,1,1);
insert into funcdep2 values(3,1,1,1);
explain (costs off) select sum(t2.a), t1.a, t1.b, t1.c from funcdep1 t1 join funcdep2 t2 on t1.b = t2.b group by t1.a;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Finalize HashAggregate
         Group Key: t1.a
         ->  Redistribute Motion 3:3  (slice2; segments: 3)
               Hash Key: t1.a
               ->  Partial HashAggregate
                     Group Key: t1.a
                     ->  Hash Join
                           Hash Cond: (t1.b = t2.b)
                           ->  Redistribute Motion 3:3  (slice3; segments: 3)
                                 Hash Key: t1.b
                                 ->  Seq Scan on funcdep1 t1
                           ->  Hash
                                 ->  Redistribute Motion 3:3  (slice4; segments: 3)
                                       Hash Key: t2.b
                                       ->  Seq Scan on funcdep2 t2
 Optimizer: Postgres query optimizer
(17 rows)

select sum(t2.a), t1.a, t1.b, t1.c from funcdep1 t1 join funcdep2 t2 on t1.b = t2.b group by t1.a;
 sum | a | b | c 
-----+---+---+---
   6 | 1 | 1 | 1
   6 | 2 | 1 | 1
   6 | 3 | 1 | 1
(3 rows)

select distinct(t1.b), sum(t2.a), t1.a, t1.b, t1.c from funcdep1 t1 join funcdep2 t2 on t1.b = t2.b group by t1.a;
 b | sum | a | b | c 
---+-----+---+---+---
 1 |   6 | 3 | 1 | 1
 1 |   6 | 2 | 1 | 1
 1 |   6 | 1 | 1 | 1
(3 rows)

select distinct(t1.b), count(distinct t1.c), sum(t2.a), t1.a, t1.b, t1.c from funcdep1 t1 join funcdep2 t2 on t1.b = t2.b group by t1.a;
 b | count | sum | a | b | c 
---+-------+-----+---+---+---
 1 |     1 |   6 | 1 | 1 | 1
 1 |     1 |   6 | 2 | 1 | 1
 1 |     1 |   6 | 3 | 1 | 1
(3 rows)

-- something wrong if we refre table t2 column
select sum(t2.a), t2.a, t1.b, t1.c from funcdep1 t1 join funcdep2 t2 on t1.b = t2.b group by t1.a;
ERROR:  column "t2.a" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select sum(t2.a), t2.a, t1.b, t1.c from funcdep1 t1 join fun...
                          ^
-- Error for grouping sets that is align to upstream
select sum(b), c, d, grouping(a) from funcdep1 group by grouping sets((a), ());
ERROR:  column "funcdep1.c" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select sum(b), c, d, grouping(a) from funcdep1 group by grou...
                       ^
select sum(b), c, d, grouping(a) from funcdep1 group by rollup(a);
ERROR:  column "funcdep1.c" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select sum(b), c, d, grouping(a) from funcdep1 group by roll...
                       ^
select sum(b), c, d, grouping(a) from funcdep1 group by cube(a);
ERROR:  column "funcdep1.c" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select sum(b), c, d, grouping(a) from funcdep1 group by cube...
                       ^
explain (costs off) select count(distinct b), c, d from funcdep1 group by a;
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  HashAggregate
         Group Key: a
         ->  HashAggregate
               Group Key: a, b
               ->  Seq Scan on funcdep1
 Optimizer: Postgres query optimizer
(7 rows)

select count(distinct b), c, d from funcdep1 group by a;
 count | c | d 
-------+---+---
     1 | 1 | 1
     1 | 1 | 1
     1 | 1 | 1
(3 rows)

explain (costs off) select count(distinct b), sum(b), b, c from funcdep1 group by a;
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Finalize HashAggregate
         Group Key: a
         ->  Partial HashAggregate
               Group Key: a, b
               ->  Seq Scan on funcdep1
 Optimizer: Postgres query optimizer
(7 rows)

select count(distinct b), sum(b), c from funcdep1 group by a;
 count | sum | c 
-------+-----+---
     1 |   1 | 1
     1 |   1 | 1
     1 |   1 | 1
(3 rows)

explain (costs off) select count(distinct b), count(distinct c), b, c from funcdep1 group by a;
                       QUERY PLAN                       
--------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  GroupAggregate
         Group Key: a
         ->  Index Scan using funcdep1_pkey on funcdep1
 Optimizer: Postgres-based planner
(5 rows)

select count(distinct b), count(distinct c), b, c from funcdep1 group by a;
 count | count | b | c 
-------+-------+---+---
     1 |     1 | 1 | 1
     1 |     1 | 1 | 1
     1 |     1 | 1 | 1
(3 rows)

explain (costs off) select count(distinct b), count(distinct c), sum(b), b, c from funcdep1 group by a;
                       QUERY PLAN                       
--------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  GroupAggregate
         Group Key: a
         ->  Index Scan using funcdep1_pkey on funcdep1
 Optimizer: Postgres-based planner
(5 rows)

select count(distinct b), count(distinct c), sum(b), b, c from funcdep1 group by a;
 count | count | sum | b | c 
-------+-------+-----+---+---
     1 |     1 |   1 | 1 | 1
     1 |     1 |   1 | 1 | 1
     1 |     1 |   1 | 1 | 1
(3 rows)

reset enable_groupagg;
reset gp_eager_two_phase_agg;
drop table funcdep1;
drop table funcdep2;
