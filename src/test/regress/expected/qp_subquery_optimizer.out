-- start_ignore
create schema qp_subquery;
CREATE TABLE qp_subquery.SUBSELECT_TBL1 (
  							f1 integer,
							f2 integer,
  							f3 float
						);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
		
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (1, 2, 3); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (2, 3, 4); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (3, 4, 5); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (1, 1, 1); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (2, 2, 2); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (3, 3, 3); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (6, 7, 8); 
INSERT INTO qp_subquery.SUBSELECT_TBL1 VALUES (8, 9, NULL); 
-- end_ignore
SELECT '' AS eight, * FROM qp_subquery.SUBSELECT_TBL1 ORDER BY 2,3,4;
 eight | f1 | f2 | f3 
-------+----+----+----
       |  1 |  1 |  1
       |  1 |  2 |  3
       |  2 |  2 |  2
       |  2 |  3 |  4
       |  3 |  3 |  3
       |  3 |  4 |  5
       |  6 |  7 |  8
       |  8 |  9 |   
(8 rows)

                        
SELECT '' AS two, f1 AS "Constant Select" FROM qp_subquery.SUBSELECT_TBL1
 					 WHERE f1 IN (SELECT 1) ORDER BY 2;
 two | Constant Select 
-----+-----------------
     |               1
     |               1
(2 rows)

                        
-- order 2
SELECT '' AS six, f1 AS "Uncorrelated Field" FROM qp_subquery.SUBSELECT_TBL1
					  WHERE f1 IN (SELECT f2 FROM qp_subquery.SUBSELECT_TBL1) ORDER BY 2;
 six | Uncorrelated Field 
-----+--------------------
     |                  1
     |                  1
     |                  2
     |                  2
     |                  3
     |                  3
(6 rows)

                        
-- order 2
SELECT '' AS six, f1 AS "Uncorrelated Field" FROM qp_subquery.SUBSELECT_TBL1
				 WHERE f1 IN (SELECT f2 FROM qp_subquery.SUBSELECT_TBL1 WHERE
				   f2 IN (SELECT f1 FROM qp_subquery.SUBSELECT_TBL1)) ORDER BY 2;
 six | Uncorrelated Field 
-----+--------------------
     |                  1
     |                  1
     |                  2
     |                  2
     |                  3
     |                  3
(6 rows)

                        
-- order 2,3
SELECT '' AS three, f1, f2
  				FROM qp_subquery.SUBSELECT_TBL1
  				WHERE (f1, f2) NOT IN (SELECT f2, CAST(f3 AS int4) FROM qp_subquery.SUBSELECT_TBL1
                         	WHERE f3 IS NOT NULL) ORDER BY 2,3;
 three | f1 | f2 
-------+----+----
       |  1 |  2
       |  6 |  7
       |  8 |  9
(3 rows)

                        
SELECT 1 AS one WHERE 1 IN (SELECT 1);
 one 
-----
   1
(1 row)

                        
SELECT 1 AS zero WHERE 1 IN (SELECT 2);
 zero 
------
(0 rows)

			 
SELECT 1 AS zero WHERE 1 NOT IN (SELECT 1);
 zero 
------
(0 rows)

                         
SELECT '' AS six, f1 AS "Correlated Field", f2 AS "Second Field"
                                FROM qp_subquery.SUBSELECT_TBL1 upper
                                WHERE f1 IN (SELECT f2 FROM qp_subquery.SUBSELECT_TBL1 WHERE f1 = upper.f1);
 six | Correlated Field | Second Field 
-----+------------------+--------------
     |                1 |            2
     |                2 |            3
     |                1 |            1
     |                2 |            2
     |                3 |            4
     |                3 |            3
(6 rows)

                         
SELECT '' AS six, f1 AS "Correlated Field", f3 AS "Second Field"
                                FROM qp_subquery.SUBSELECT_TBL1 upper
                                WHERE f1 IN
                                (SELECT f2 FROM qp_subquery.SUBSELECT_TBL1 WHERE CAST(upper.f2 AS float) = f3);
 six | Correlated Field | Second Field 
-----+------------------+--------------
     |                2 |            4
     |                1 |            1
     |                2 |            2
     |                3 |            5
     |                3 |            3
(5 rows)

                         
SELECT '' AS six, f1 AS "Correlated Field", f3 AS "Second Field"
                                FROM qp_subquery.SUBSELECT_TBL1 upper
                                WHERE f3 IN (SELECT upper.f1 + f2 FROM qp_subquery.SUBSELECT_TBL1
                                WHERE f2 = CAST(f3 AS integer));
 six | Correlated Field | Second Field 
-----+------------------+--------------
     |                1 |            3
     |                2 |            4
     |                3 |            5
     |                6 |            8
(4 rows)

                         
SELECT '' AS five, f1 AS "Correlated Field"
                                FROM qp_subquery.SUBSELECT_TBL1
                                WHERE (f1, f2) IN (SELECT f2, CAST(f3 AS int4) FROM qp_subquery.SUBSELECT_TBL1
                                WHERE f3 IS NOT NULL);
 five | Correlated Field 
------+------------------
      |                3
      |                3
      |                2
      |                1
      |                2
(5 rows)

                         
-- start_ignore
create table qp_subquery.join_tab1 ( i integer, j integer, t text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO qp_subquery.join_tab1 VALUES (1, 4, 'one');
INSERT INTO qp_subquery.join_tab1 VALUES (2, 3, 'two');
INSERT INTO qp_subquery.join_tab1 VALUES (3, 2, 'three');
INSERT INTO qp_subquery.join_tab1 VALUES (4, 1, 'four');
INSERT INTO qp_subquery.join_tab1 VALUES (5, 0, 'five');
INSERT INTO qp_subquery.join_tab1 VALUES (6, 6, 'six');
INSERT INTO qp_subquery.join_tab1  VALUES (7, 7, 'seven');
INSERT INTO qp_subquery.join_tab1 VALUES (8, 8, 'eight');
INSERT INTO qp_subquery.join_tab1 VALUES (0, NULL, 'zero');
INSERT INTO qp_subquery.join_tab1 VALUES (NULL, NULL, 'null');
INSERT INTO qp_subquery.join_tab1 VALUES (NULL, 0, 'zero');
-- end_ignore
select * from qp_subquery.join_tab1 order by i, t;				
 i | j |   t   
---+---+-------
 0 |   | zero
 1 | 4 | one
 2 | 3 | two
 3 | 2 | three
 4 | 1 | four
 5 | 0 | five
 6 | 6 | six
 7 | 7 | seven
 8 | 8 | eight
   |   | null
   | 0 | zero
(11 rows)

                         
-- start_ignore
create table qp_subquery.join_tab2 ( i integer, k integer);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO qp_subquery.join_tab2 VALUES (1, -1);
INSERT INTO qp_subquery.join_tab2 VALUES (2, 2);
INSERT INTO qp_subquery.join_tab2 VALUES (3, -3);
INSERT INTO qp_subquery.join_tab2 VALUES (2, 4);
INSERT INTO qp_subquery.join_tab2 VALUES (5, -5);
INSERT INTO qp_subquery.join_tab2 VALUES (5, -5);
INSERT INTO qp_subquery.join_tab2 VALUES (0, NULL);
INSERT INTO qp_subquery.join_tab2 VALUES (NULL, NULL);
INSERT INTO qp_subquery.join_tab2 VALUES (NULL, 0);
-- end_ignore
select * from qp_subquery.join_tab2; 
 i | k  
---+----
 1 | -1
 2 |  2
 2 |  4
 0 |   
 3 | -3
 5 | -5
 5 | -5
   |   
   |  0
(9 rows)

                         
select * from ( SELECT '' AS "col", * FROM qp_subquery.join_tab1 AS tx)A;
 col | i | j |   t   
-----+---+---+-------
     | 1 | 4 | one
     | 2 | 3 | two
     | 0 |   | zero
     | 3 | 2 | three
     | 4 | 1 | four
     | 5 | 0 | five
     | 6 | 6 | six
     | 7 | 7 | seven
     |   |   | null
     |   | 0 | zero
     | 8 | 8 | eight
(11 rows)

                         
select * from ( SELECT '' AS "col", * FROM qp_subquery.join_tab1 AS tx) AS A;
 col | i | j |   t   
-----+---+---+-------
     | 8 | 8 | eight
     | 1 | 4 | one
     | 2 | 3 | two
     | 0 |   | zero
     | 3 | 2 | three
     | 4 | 1 | four
     | 5 | 0 | five
     | 6 | 6 | six
     | 7 | 7 | seven
     |   |   | null
     |   | 0 | zero
(11 rows)

                         
select * from(SELECT '' AS "col", * FROM qp_subquery.join_tab1 AS tx) as A(a,b,c);
 a | b | c |   t   
---+---+---+-------
   | 3 | 2 | three
   | 4 | 1 | four
   | 5 | 0 | five
   | 6 | 6 | six
   | 7 | 7 | seven
   |   |   | null
   |   | 0 | zero
   | 8 | 8 | eight
   | 1 | 4 | one
   | 2 | 3 | two
   | 0 |   | zero
(11 rows)

                         
select * from(SELECT '' AS "col", t1.a, t2.e FROM qp_subquery.join_tab1 t1 (a, b, c), qp_subquery.join_tab2 t2 (d, e) 
				WHERE t1.a = t2.d)as A;
 col | a | e  
-----+---+----
     | 3 | -3
     | 5 | -5
     | 5 | -5
     | 1 | -1
     | 2 |  2
     | 2 |  4
     | 0 |   
(7 rows)

                         
select * from qp_subquery.join_tab1 where exists(select * from qp_subquery.join_tab2 where qp_subquery.join_tab1.i=qp_subquery.join_tab2.i);
 i | j |   t   
---+---+-------
 3 | 2 | three
 5 | 0 | five
 1 | 4 | one
 2 | 3 | two
 0 |   | zero
(5 rows)

                         
select * from qp_subquery.join_tab1 where not exists(select * from qp_subquery.join_tab2 where qp_subquery.join_tab1.i=qp_subquery.join_tab2.i) order by i,j;
 i | j |   t   
---+---+-------
 4 | 1 | four
 6 | 6 | six
 7 | 7 | seven
 8 | 8 | eight
   | 0 | zero
   |   | null
(6 rows)

                         
select 25 = any ('{1,2,3,4}');
 ?column? 
----------
 f
(1 row)

                         
select 25 = any ('{1,2,25}');
 ?column? 
----------
 t
(1 row)

                         
select 'abc' = any('{abc,d,e}');
 ?column? 
----------
 t
(1 row)

                         
-- start_ignore
create table qp_subquery.subq_abc(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into qp_subquery.subq_abc values(1);
insert into qp_subquery.subq_abc values(9);
insert into qp_subquery.subq_abc values(3);
insert into qp_subquery.subq_abc values(6);
-- end_ignore
select * from qp_subquery.subq_abc;
 a 
---
 9
 1
 3
 6
(4 rows)

                         
SELECT 9 = any (select * from qp_subquery.subq_abc);
 ?column? 
----------
 t
(1 row)

                         
select null::int >= any ('{}');
 ?column? 
----------
 f
(1 row)

                         
select 'abc' = any('{" "}');
 ?column? 
----------
 f
(1 row)

                         
select 33.4 = any (array[1,2,3]);
 ?column? 
----------
 f
(1 row)

                         
select 40 = all ('{3,4,40,10}');
 ?column? 
----------
 f
(1 row)

                         
select 55 >= all ('{1,2,55}');
 ?column? 
----------
 t
(1 row)

			 
select 25 = all ('{25,25,25}');
 ?column? 
----------
 t
(1 row)

		          
select 'abc' = all('{abc}');
 ?column? 
----------
 t
(1 row)

                         
select 'abc' = all('{abc,d,e}');
 ?column? 
----------
 f
(1 row)

                         
select 'abc' = all('{"abc"}');
 ?column? 
----------
 t
(1 row)

                         
select 'abc' = all('{" "}');
 ?column? 
----------
 f
(1 row)

                         
select null::int >= all ('{1,2,33}');
 ?column? 
----------
 
(1 row)

                         
select null::int >= all ('{}');
 ?column? 
----------
 t
(1 row)

                         
select 33.4 > all (array[1,2,3]);                       
 ?column? 
----------
 t
(1 row)

                         
-- start_ignore
create table qp_subquery.emp_list(empid int,name char(20),sal float); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'empid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into qp_subquery.emp_list values(1,'empone',1000); 
insert into qp_subquery.emp_list values(2,'emptwo',2000); 
insert into qp_subquery.emp_list values(3,'empthree',3000); 
insert into qp_subquery.emp_list values(4,'empfour',4000); 
insert into qp_subquery.emp_list values(5,'empfive',4000); 
-- end_ignore
select * from qp_subquery.emp_list;
 empid |         name         | sal  
-------+----------------------+------
     1 | empone               | 1000
     2 | emptwo               | 2000
     3 | empthree             | 3000
     4 | empfour              | 4000
     5 | empfive              | 4000
(5 rows)

                       
select name from qp_subquery.emp_list where sal=(select max(sal) from qp_subquery.emp_list);
         name         
----------------------
 empfour             
 empfive             
(2 rows)

                        
select name from qp_subquery.emp_list where sal=(select min(sal) from qp_subquery.emp_list);
         name         
----------------------
 empone              
(1 row)

                       
select name from qp_subquery.emp_list where sal>(select avg(sal) from qp_subquery.emp_list);
         name         
----------------------
 empthree            
 empfour             
 empfive             
(3 rows)

                       
select name from qp_subquery.emp_list where sal<(select avg(sal) from qp_subquery.emp_list);
         name         
----------------------
 empone              
 emptwo              
(2 rows)

                      
CREATE TABLE qp_subquery.subq_test1 (s1 INT, s2 CHAR(5), s3 FLOAT);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 's1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO qp_subquery.subq_test1 VALUES (1,'1',1.0); 
INSERT INTO qp_subquery.subq_test1 VALUES (2,'2',2.0);
INSERT INTO qp_subquery.subq_test1 VALUES (3,'3',3.0);
INSERT INTO qp_subquery.subq_test1 VALUES (4,'4',4.0);
SELECT sb1,sb2,sb3 FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM qp_subquery.subq_test1) AS sb WHERE sb1 > 1;
 sb1 |  sb2  | sb3 
-----+-------+-----
   2 | 2     |   4
   3 | 3     |   6
   4 | 4     |   8
(3 rows)

                      
select to_char(Avg(sum_col1),'9999999.9999999') from (select sum(s1) as sum_col1 from qp_subquery.subq_test1 group by s1) as tab1;
     to_char      
------------------
        2.5000000
(1 row)

                      
select g2,count(*) from (select I, count(*) as g2 from qp_subquery.join_tab1 group by I) as vtable group by g2;
 g2 | count 
----+-------
  1 |     9
  2 |     1
(2 rows)

                      
-- start_ignore
create table qp_subquery.join_tab4 ( i integer, j integer, t text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into qp_subquery.join_tab4 values (1,7,'sunday'); 
insert into qp_subquery.join_tab4 values (2,6,'monday');
insert into qp_subquery.join_tab4 values (3,5,'tueday');
insert into qp_subquery.join_tab4 values (4,4,'wedday');
insert into qp_subquery.join_tab4 values (5,3,'thuday');
insert into qp_subquery.join_tab4 values (6,2,'friday');
insert into qp_subquery.join_tab4 values (7,1,'satday');
-- end_ignore
select * from qp_subquery.join_tab4;
 i | j |   t    
---+---+--------
 1 | 7 | sunday
 2 | 6 | monday
 3 | 5 | tueday
 4 | 4 | wedday
 5 | 3 | thuday
 6 | 2 | friday
 7 | 1 | satday
(7 rows)

                      
select i,j,t from (select * from (select i,j,t from qp_subquery.join_tab1)as dtab1 
				UNION select * from(select i,j,t from qp_subquery.join_tab4) as dtab2 )as mtab; 	
 i | j |   t    
---+---+--------
 1 | 7 | sunday
 3 | 5 | tueday
 4 | 1 | four
 6 | 2 | friday
   |   | null
 1 | 4 | one
 2 | 6 | monday
 5 | 0 | five
 5 | 3 | thuday
 6 | 6 | six
 7 | 7 | seven
 8 | 8 | eight
   | 0 | zero
 0 |   | zero
 2 | 3 | two
 3 | 2 | three
 4 | 4 | wedday
 7 | 1 | satday
(18 rows)

                      
select * from qp_subquery.join_tab1 where i = (select i from qp_subquery.join_tab4 where t='satday');
 i | j |   t   
---+---+-------
 7 | 7 | seven
(1 row)

                      
select * from qp_subquery.join_tab1 where i = (select i from qp_subquery.join_tab4);
ERROR:  One or more assertions failed
DETAIL:  Expected no more than one row to be returned by expression
                      
-- start_ignore
drop schema qp_subquery cascade;
NOTICE:  drop cascades to table qp_subquery.join_tab4
NOTICE:  drop cascades to table qp_subquery.subq_test1
NOTICE:  drop cascades to table qp_subquery.emp_list
NOTICE:  drop cascades to table qp_subquery.subq_abc
NOTICE:  drop cascades to table qp_subquery.join_tab2
NOTICE:  drop cascades to table qp_subquery.join_tab1
NOTICE:  drop cascades to table qp_subquery.subselect_tbl1
-- end_ignore
