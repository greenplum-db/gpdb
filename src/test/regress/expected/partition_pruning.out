--
-- See MPP-6861
--
CREATE TABLE ds_4
(
  month_id character varying(6),
  cust_group_acc numeric(10),
  mobile_no character varying(10),
  source character varying(12),
  vas_group numeric(10),
  vas_type numeric(10),
  count_vas integer,
  amt_vas numeric(10,2),
  network_type character varying(3),
  execution_id integer
)
WITH (
  OIDS=FALSE
)
DISTRIBUTED BY (cust_group_acc, mobile_no)
PARTITION BY LIST(month_id)
          (
          PARTITION p200800 VALUES('200800'),
          PARTITION p200801 VALUES('200801'),
          PARTITION p200802 VALUES('200802'),
          PARTITION p200803 VALUES('200803')
);
NOTICE:  CREATE TABLE will create partition "ds_4_1_prt_p200800" for table "ds_4"
NOTICE:  CREATE TABLE will create partition "ds_4_1_prt_p200801" for table "ds_4"
NOTICE:  CREATE TABLE will create partition "ds_4_1_prt_p200802" for table "ds_4"
NOTICE:  CREATE TABLE will create partition "ds_4_1_prt_p200803" for table "ds_4"
-- this is the case that worked before MPP-6861
explain select * from ds_4 where month_id = '200800';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: month_id::text = '200800'::text
(4 rows)

-- now we can evaluate this function at planning/prune time
explain select * from ds_4 where month_id::int = 200800;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: month_id::integer = 200800
(4 rows)

-- this will be satisfied by 200800
explain select * from ds_4 where month_id::int - 801 < 200000;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: (month_id::integer - 801) < 200000
(4 rows)

-- test OR case -- should NOT get pruning
explain select * from ds_4 where month_id::int - 801 < 200000 OR count_vas > 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: (month_id::integer - 801) < 200000 OR count_vas > 10
         ->  Seq Scan on ds_4_1_prt_p200801 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: (month_id::integer - 801) < 200000 OR count_vas > 10
         ->  Seq Scan on ds_4_1_prt_p200802 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: (month_id::integer - 801) < 200000 OR count_vas > 10
         ->  Seq Scan on ds_4_1_prt_p200803 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: (month_id::integer - 801) < 200000 OR count_vas > 10
(10 rows)

-- test AND case -- should still get pruning
explain select * from ds_4 where month_id::int - 801 < 200000 AND count_vas > 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: (month_id::integer - 801) < 200000 AND count_vas > 10
(4 rows)

-- test expression case : should get pruning
explain select * from ds_4 where case when month_id = '200800' then 100 else 2 end = 100;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: CASE WHEN month_id::text = '200800'::text THEN 100 ELSE 2 END = 100
(4 rows)

-- test expression case : should get pruning
explain select * from ds_4 where case when month_id = '200800' then NULL else 2 end IS NULL;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: CASE WHEN month_id::text = '200800'::text THEN NULL::integer ELSE 2 END IS NULL
(4 rows)

-- should still get pruning here -- count_vas is only used in the path for month id = 200800
explain select * from ds_4 where case when month_id::int = 200800 then count_vas else 2 end IS NULL;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200800 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: CASE WHEN month_id::integer = 200800 THEN count_vas ELSE 2 END IS NULL
(4 rows)

-- do one that matches a couple partitions
explain select * from ds_4 where month_id::int in (200801, 1,55,6,6,6,6,66,565,65,65,200803);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=184)
   ->  Append  (cost=0.00..0.00 rows=1 width=184)
         ->  Seq Scan on ds_4_1_prt_p200801 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: month_id::integer = ANY ('{200801,1,55,6,6,6,6,66,565,65,65,200803}'::integer[])
         ->  Seq Scan on ds_4_1_prt_p200803 ds_4  (cost=0.00..0.00 rows=1 width=184)
               Filter: month_id::integer = ANY ('{200801,1,55,6,6,6,6,66,565,65,65,200803}'::integer[])
(6 rows)

-- cleanup
drop table ds_4;
--
-- See MPP-18979
--
CREATE TABLE ds_2
(
  month_id character varying(6),
  cust_group_acc numeric(10),
  mobile_no character varying(10),
  source character varying(12),
  vas_group numeric(10),
  vas_type numeric(10),
  count_vas integer,
  amt_vas numeric(10,2),
  network_type character varying(3),
  execution_id integer
)
WITH (
  OIDS=FALSE
)
DISTRIBUTED BY (cust_group_acc, mobile_no)
PARTITION BY LIST(month_id)
          (
          PARTITION p200800 VALUES('200800'),
          PARTITION p200801 VALUES('200801'),
          PARTITION p200802 VALUES('200802'),
          PARTITION p200803 VALUES('200803'),
          PARTITION p200804 VALUES('200804'),
          PARTITION p200805 VALUES('200805'),
          PARTITION p200806 VALUES('200806'),
          PARTITION p200807 VALUES('200807'),
          PARTITION p200808 VALUES('200808'),
          PARTITION p200809 VALUES('200809')
);
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200800" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200801" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200802" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200803" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200804" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200805" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200806" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200807" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200808" for table "ds_2"
NOTICE:  CREATE TABLE will create partition "ds_2_1_prt_p200809" for table "ds_2"
insert into ds_2(month_id) values('200800');
insert into ds_2(month_id) values('200801');
insert into ds_2(month_id) values('200802');
insert into ds_2(month_id) values('200803');
insert into ds_2(month_id) values('200804');
insert into ds_2(month_id) values('200805');
insert into ds_2(month_id) values('200806');
insert into ds_2(month_id) values('200807');
insert into ds_2(month_id) values('200808');
insert into ds_2(month_id) values('200809');
-- queries without bitmap scan
set optimizer_segments=2;
explain select * from ds_2 where month_id::int in (200808, 1315) order by month_id;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=3.30..3.31 rows=1 width=184)
   Merge Key: month_id
   ->  Sort  (cost=3.30..3.31 rows=1 width=184)
         Sort Key: public.ds_2.month_id
         ->  Append  (cost=0.00..3.29 rows=1 width=184)
               ->  Seq Scan on ds_2_1_prt_p200808 ds_2  (cost=0.00..3.29 rows=1 width=184)
                     Filter: month_id::integer = ANY ('{200808,1315}'::integer[])
(7 rows)

explain  select * from ds_2 where month_id::int in (200808, 200801, 2008010) order by month_id;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=3.50..3.50 rows=1 width=184)
   Merge Key: month_id
   ->  Sort  (cost=3.50..3.50 rows=1 width=184)
         Sort Key: public.ds_2.month_id
         ->  Append  (cost=0.00..3.49 rows=1 width=184)
               ->  Seq Scan on ds_2_1_prt_p200801 ds_2  (cost=0.00..3.49 rows=1 width=184)
                     Filter: month_id::integer = ANY ('{200808,200801,2008010}'::integer[])
               ->  Seq Scan on ds_2_1_prt_p200808 ds_2  (cost=0.00..3.49 rows=1 width=184)
                     Filter: month_id::integer = ANY ('{200808,200801,2008010}'::integer[])
(9 rows)

reset optimizer_segments;
select * from ds_2 where month_id::int in (200907, 1315) order by month_id;
 month_id | cust_group_acc | mobile_no | source | vas_group | vas_type | count_vas | amt_vas | network_type | execution_id 
----------+----------------+-----------+--------+-----------+----------+-----------+---------+--------------+--------------
(0 rows)

select * from ds_2 where month_id::int in (200808, 1315) order by month_id;
 month_id | cust_group_acc | mobile_no | source | vas_group | vas_type | count_vas | amt_vas | network_type | execution_id 
----------+----------------+-----------+--------+-----------+----------+-----------+---------+--------------+--------------
 200808   |                |           |        |           |          |           |         |              |             
(1 row)

select * from ds_2 where month_id::int in (200808, 200801) order by month_id;
 month_id | cust_group_acc | mobile_no | source | vas_group | vas_type | count_vas | amt_vas | network_type | execution_id 
----------+----------------+-----------+--------+-----------+----------+-----------+---------+--------------+--------------
 200801   |                |           |        |           |          |           |         |              |             
 200808   |                |           |        |           |          |           |         |              |             
(2 rows)

select * from ds_2 where month_id::int in (200808, 200801, 2008010) order by month_id;
 month_id | cust_group_acc | mobile_no | source | vas_group | vas_type | count_vas | amt_vas | network_type | execution_id 
----------+----------------+-----------+--------+-----------+----------+-----------+---------+--------------+--------------
 200801   |                |           |        |           |          |           |         |              |             
 200808   |                |           |        |           |          |           |         |              |             
(2 rows)

-- cleanup
drop table ds_2;
Create or replace function public.reverse(text) Returns text as $BODY$
DECLARE
   Original alias for $1;
   Reverse_str text;
   I int4;
BEGIN
   Reverse_str :='';
   For I in reverse length(original)..1 LOOP
   Reverse_str := reverse_str || substr(original,I,1);
END LOOP;
RETURN reverse_str;
END;
$BODY$ LANGUAGE plpgsql IMMUTABLE;
drop table if exists dnsdata cascade;
NOTICE:  table "dnsdata" does not exist, skipping
CREATE TABLE dnsdata(dnsname text) DISTRIBUTED RANDOMLY;
CREATE INDEX dnsdata_d1_idx ON dnsdata USING bitmap (split_part(reverse(dnsname),'.'::text,1));
CREATE INDEX dnsdata_d2_idx ON dnsdata USING bitmap (split_part(reverse(dnsname),'.'::text,2));
insert into dnsdata values('www.google.com');
insert into dnsdata values('www.google1.com');
insert into dnsdata values('1.google.com');
insert into dnsdata values('2.google.com');
insert into dnsdata select 'www.b.com' from generate_series(1, 100000) as x(a);
analyze dnsdata;
-- queries with bitmap scan enabled
set enable_bitmapscan=on;
set enable_indexscan=on;
set enable_seqscan=off;
Select dnsname from dnsdata
where (split_part(reverse('cache.google.com'),'.',1))=(split_part(reverse(dnsname),'.',1))
and (split_part(reverse('cache.google.com'),'.',2))=(split_part(reverse(dnsname),'.',2)) 
order by dnsname;
    dnsname     
----------------
 1.google.com
 2.google.com
 www.google.com
(3 rows)

Select dnsname from dnsdata
where (split_part(reverse('cache.google.com'),'.',1))=(split_part(reverse(dnsname),'.',1))
and (split_part(reverse('cache.google.com'),'.',2))=(split_part(reverse(dnsname),'.',2))
and dnsname = 'cache.google.com'
order by dnsname;
 dnsname 
---------
(0 rows)

-- cleanup
drop table dnsdata cascade;
drop function public.reverse(text) cascade;
Create or replace function public.ZeroFunc(int) Returns int as $BODY$
BEGIN
  RETURN 0;
END;
$BODY$ LANGUAGE plpgsql IMMUTABLE;
drop table if exists mytable cascade;
NOTICE:  table "mytable" does not exist, skipping
create table mytable(i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into mytable select x, x+1 from generate_series(1, 100000) as x;
analyze mytable;
CREATE INDEX mytable_idx1 ON mytable USING bitmap(zerofunc(i));
select * from mytable where ZeroFunc(i)=0 and i=100 order by i;
  i  |  j  
-----+-----
 100 | 101
(1 row)

select * from mytable where ZeroFunc(i)=0 and i=-1 order by i;
 i | j 
---+---
(0 rows)

-- cleanup
drop function ZeroFunc(int) cascade;
NOTICE:  drop cascades to index mytable_idx1
drop table mytable cascade;
-- start_ignore
create language plpythonu;
-- end_ignore
-- @description Tests for static partition selection (MPP-24709, GPSQL-2879)
create or replace function get_selected_parts(explain_query text) returns text as
$$
rv = plpy.execute('explain ' + explain_query)
search_text = 'Partition Selector'
result = []
result.append(0)
result.append(0)
for i in range(len(rv)):
    cur_line = rv[i]['QUERY PLAN']
    if search_text.lower() in cur_line.lower():
        j = i+1
        temp_line = rv[j]['QUERY PLAN']
        while temp_line.find('Partitions selected:') == -1:
            j += 1
            if j == len(rv) - 1:
                break
            temp_line = rv[j]['QUERY PLAN']

        if temp_line.find('Partitions selected:') != -1:
            result[0] = int(temp_line[temp_line.index('selected: ')+10:temp_line.index(' (out')])
            result[1] = int(temp_line[temp_line.index('out of')+6:temp_line.index(')')])
return result
$$
language plpythonu;
drop table if exists partprune_foo;
create table partprune_foo(a int, b int, c int) partition by range (b) (start (1) end (101) every (10));
insert into partprune_foo select generate_series(1,5), generate_series(1,100), generate_series(1,10);
analyze partprune_foo;
select get_selected_parts(' select * from partprune_foo;');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo;
 a |  b  | c  
---+-----+----
 1 |   1 |  1
 3 |   3 |  3
 5 |   5 |  5
 1 |   6 |  6
 3 |   8 |  8
 5 |  10 | 10
 1 |  11 |  1
 3 |  13 |  3
 5 |  15 |  5
 1 |  16 |  6
 3 |  18 |  8
 5 |  20 | 10
 1 |  21 |  1
 3 |  23 |  3
 5 |  25 |  5
 1 |  26 |  6
 3 |  28 |  8
 5 |  30 | 10
 1 |  31 |  1
 3 |  33 |  3
 5 |  35 |  5
 1 |  36 |  6
 3 |  38 |  8
 5 |  40 | 10
 1 |  41 |  1
 3 |  43 |  3
 5 |  45 |  5
 1 |  46 |  6
 3 |  48 |  8
 5 |  50 | 10
 1 |  51 |  1
 3 |  53 |  3
 5 |  55 |  5
 1 |  56 |  6
 3 |  58 |  8
 5 |  60 | 10
 1 |  61 |  1
 3 |  63 |  3
 5 |  65 |  5
 1 |  66 |  6
 3 |  68 |  8
 5 |  70 | 10
 1 |  71 |  1
 3 |  73 |  3
 5 |  75 |  5
 1 |  76 |  6
 3 |  78 |  8
 5 |  80 | 10
 1 |  81 |  1
 3 |  83 |  3
 5 |  85 |  5
 1 |  86 |  6
 3 |  88 |  8
 5 |  90 | 10
 1 |  91 |  1
 3 |  93 |  3
 5 |  95 |  5
 1 |  96 |  6
 3 |  98 |  8
 5 | 100 | 10
 2 |   2 |  2
 4 |   4 |  4
 2 |   7 |  7
 4 |   9 |  9
 2 |  12 |  2
 4 |  14 |  4
 2 |  17 |  7
 4 |  19 |  9
 2 |  22 |  2
 4 |  24 |  4
 2 |  27 |  7
 4 |  29 |  9
 2 |  32 |  2
 4 |  34 |  4
 2 |  37 |  7
 4 |  39 |  9
 2 |  42 |  2
 4 |  44 |  4
 2 |  47 |  7
 4 |  49 |  9
 2 |  52 |  2
 4 |  54 |  4
 2 |  57 |  7
 4 |  59 |  9
 2 |  62 |  2
 4 |  64 |  4
 2 |  67 |  7
 4 |  69 |  9
 2 |  72 |  2
 4 |  74 |  4
 2 |  77 |  7
 4 |  79 |  9
 2 |  82 |  2
 4 |  84 |  4
 2 |  87 |  7
 4 |  89 |  9
 2 |  92 |  2
 4 |  94 |  4
 2 |  97 |  7
 4 |  99 |  9
(100 rows)

select get_selected_parts(' select * from partprune_foo where b = 35;');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo where b = 35;
 a | b  | c 
---+----+---
 5 | 35 | 5
(1 row)

select get_selected_parts(' select * from partprune_foo where b < 35;');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo where b < 35;
 a | b  | c  
---+----+----
 2 |  2 |  2
 4 |  4 |  4
 2 |  7 |  7
 4 |  9 |  9
 2 | 12 |  2
 4 | 14 |  4
 2 | 17 |  7
 4 | 19 |  9
 2 | 22 |  2
 4 | 24 |  4
 2 | 27 |  7
 4 | 29 |  9
 2 | 32 |  2
 4 | 34 |  4
 1 |  1 |  1
 3 |  3 |  3
 5 |  5 |  5
 1 |  6 |  6
 3 |  8 |  8
 5 | 10 | 10
 1 | 11 |  1
 3 | 13 |  3
 5 | 15 |  5
 1 | 16 |  6
 3 | 18 |  8
 5 | 20 | 10
 1 | 21 |  1
 3 | 23 |  3
 5 | 25 |  5
 1 | 26 |  6
 3 | 28 |  8
 5 | 30 | 10
 1 | 31 |  1
 3 | 33 |  3
(34 rows)

select get_selected_parts(' select * from partprune_foo where b in (5, 6, 14, 23);');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo where b in (5, 6, 14, 23);
 a | b  | c 
---+----+---
 5 |  5 | 5
 1 |  6 | 6
 3 | 23 | 3
 4 | 14 | 4
(4 rows)

select get_selected_parts(' select * from partprune_foo where b < 15 or b > 60;');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo where b < 15 or b > 60;
 a |  b  | c  
---+-----+----
 2 |   2 |  2
 4 |   4 |  4
 2 |   7 |  7
 4 |   9 |  9
 2 |  12 |  2
 4 |  14 |  4
 2 |  62 |  2
 4 |  64 |  4
 2 |  67 |  7
 4 |  69 |  9
 2 |  72 |  2
 4 |  74 |  4
 2 |  77 |  7
 4 |  79 |  9
 2 |  82 |  2
 4 |  84 |  4
 2 |  87 |  7
 4 |  89 |  9
 2 |  92 |  2
 4 |  94 |  4
 2 |  97 |  7
 4 |  99 |  9
 1 |   1 |  1
 3 |   3 |  3
 5 |   5 |  5
 1 |   6 |  6
 3 |   8 |  8
 5 |  10 | 10
 1 |  11 |  1
 3 |  13 |  3
 1 |  61 |  1
 3 |  63 |  3
 5 |  65 |  5
 1 |  66 |  6
 3 |  68 |  8
 5 |  70 | 10
 1 |  71 |  1
 3 |  73 |  3
 5 |  75 |  5
 1 |  76 |  6
 3 |  78 |  8
 5 |  80 | 10
 1 |  81 |  1
 3 |  83 |  3
 5 |  85 |  5
 1 |  86 |  6
 3 |  88 |  8
 5 |  90 | 10
 1 |  91 |  1
 3 |  93 |  3
 5 |  95 |  5
 1 |  96 |  6
 3 |  98 |  8
 5 | 100 | 10
(54 rows)

select get_selected_parts(' select * from partprune_foo where b = 150;');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo where b = 150;
 a | b | c 
---+---+---
(0 rows)

select get_selected_parts(' select * from partprune_foo where b = a*5;');
 get_selected_parts 
--------------------
 [0, 0]
(1 row)

select * from partprune_foo where b = a*5;
 a | b  | c 
---+----+---
 5 | 25 | 5
(1 row)

