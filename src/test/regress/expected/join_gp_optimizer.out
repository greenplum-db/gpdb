-- test numeric hash join
set enable_hashjoin to on;
set enable_mergejoin to off;
set enable_nestloop to off;
create table nhtest (i numeric(10, 2)) distributed by (i);
insert into nhtest values(100000.22);
insert into nhtest values(300000.19);
explain select * from nhtest a join nhtest b using (i);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..862.00 rows=1 width=11)
   ->  Hash Join  (cost=0.00..862.00 rows=1 width=11)
         Hash Cond: public.nhtest.i = public.nhtest.i
         ->  Table Scan on nhtest  (cost=0.00..431.00 rows=1 width=11)
         ->  Hash  (cost=431.00..431.00 rows=1 width=11)
               ->  Table Scan on nhtest  (cost=0.00..431.00 rows=1 width=11)
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off; optimizer=on; optimizer_segments=3
(7 rows)

select * from nhtest a join nhtest b using (i);
     i     
-----------
 300000.19
 100000.22
(2 rows)

create temp table l(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into l values (1), (1), (2);
select * from l l1 join l l2 on l1.a = l2.a left join l l3 on l1.a = l3.a and l1.a = 2 order by 1,2,3;
 a | a | a 
---+---+---
 1 | 1 |  
 1 | 1 |  
 1 | 1 |  
 1 | 1 |  
 2 | 2 | 2
(5 rows)

--
-- test hash join
--
create table hjtest (i int, j int) distributed by (i,j);
insert into hjtest values(3, 4);
select count(*) from hjtest a1, hjtest a2 where a2.i = least (a1.i,4) and a2.j = 4;
 count 
-------
     1
(1 row)

--
-- Predicate propagation over equality conditions
--
drop schema if exists pred;
NOTICE:  schema "pred" does not exist, skipping
create schema pred;
set search_path=pred;
create table t1 (x int, y int, z int) distributed by (y);
create table t2 (x int, y int, z int) distributed by (x);
insert into t1 select i, i, i from generate_series(1,100) i;
insert into t2 select * from t1;
analyze t1;
analyze t2;
--
-- infer over equalities
--
explain select count(*) from t1,t2 where t1.x = 100 and t1.x = t2.x;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..862.01 rows=1 width=8)
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..862.01 rows=1 width=8)
         ->  Aggregate  (cost=0.00..862.01 rows=1 width=8)
               ->  Hash Join  (cost=0.00..862.01 rows=1 width=1)
                     Hash Cond: t1.x = t2.x
                     ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..431.00 rows=1 width=4)
                           Hash Key: t1.x
                           ->  Table Scan on t1  (cost=0.00..431.00 rows=1 width=4)
                                 Filter: x = 100
                     ->  Hash  (cost=431.00..431.00 rows=1 width=4)
                           ->  Table Scan on t2  (cost=0.00..431.00 rows=1 width=4)
                                 Filter: x = 100
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off; optimizer=on; optimizer_segments=3
(13 rows)

select count(*) from t1,t2 where t1.x = 100 and t1.x = t2.x;
 count 
-------
     1
(1 row)

--
-- infer over >=
--
explain select * from t1,t2 where t1.x = 100 and t2.x >= t1.x;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..1324040.53 rows=34 width=24)
   ->  Nested Loop  (cost=0.00..1324040.53 rows=17 width=24)
         Join Filter: t2.x >= t1.x
         ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..431.00 rows=2 width=12)
               ->  Table Scan on t1  (cost=0.00..431.00 rows=1 width=12)
                     Filter: x = 100
         ->  Table Scan on t2  (cost=0.00..431.00 rows=50 width=12)
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off; optimizer=on; optimizer_segments=3
(8 rows)

select * from t1,t2 where t1.x = 100 and t2.x >= t1.x;
  x  |  y  |  z  |  x  |  y  |  z  
-----+-----+-----+-----+-----+-----
 100 | 100 | 100 | 100 | 100 | 100
(1 row)

--
-- multiple inferences
--
set optimizer_segments=2;
explain select * from t1,t2 where t1.x = 100 and t1.x = t2.y and t1.x <= t2.x;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..862.01 rows=1 width=24)
   ->  Hash Join  (cost=0.00..862.01 rows=1 width=24)
         Hash Cond: t1.x = t2.y
         Join Filter: t1.x <= t2.x
         ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..431.00 rows=1 width=12)
               Hash Key: t1.x
               ->  Table Scan on t1  (cost=0.00..431.00 rows=1 width=12)
                     Filter: x = 100
         ->  Hash  (cost=431.00..431.00 rows=1 width=12)
               ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=0.00..431.00 rows=1 width=12)
                     Hash Key: t2.y
                     ->  Table Scan on t2  (cost=0.00..431.00 rows=1 width=12)
                           Filter: y = 100
 Settings:  enable_hashjoin=on; enable_mergejoin=off; enable_nestloop=off; optimizer=on; optimizer_segments=2
(14 rows)

reset optimizer_segments;
select * from t1,t2 where t1.x = 100 and t1.x = t2.y and t1.x <= t2.x;
  x  |  y  |  z  |  x  |  y  |  z  
-----+-----+-----+-----+-----+-----
 100 | 100 | 100 | 100 | 100 | 100
(1 row)

--
-- MPP-18537: hash clause references a constant in outer child target list
--
create table hjn_test (i int, j int) distributed by (i,j);
insert into hjn_test values(3, 4);
create table int4_tbl (f1 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into int4_tbl values(123456), (-2147483647), (0), (-123456), (2147483647);
select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,4) and hjn_test.j = 4;
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,(array[4])[1]) and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where least (foo.bar,(array[4])[1]) = hjn_test.i and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, least(4,10)) and hjn_test.j = least(4,10);
 count 
-------
     1
(1 row)

select * from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
     f1      |     f1      
-------------+-------------
      123456 |      123456
 -2147483647 | -2147483647
           0 |           0
     -123456 |     -123456
  2147483647 |  2147483647
(5 rows)

set enable_hashjoin to off;
-- Disable hashjoin forms fo ORCA
select disable_xform('CXformInnerJoin2HashJoin');
            disable_xform             
--------------------------------------
 CXformInnerJoin2HashJoin is disabled
(1 row)

select disable_xform('CXformLeftAntiSemiJoin2HashJoin');
                disable_xform                
---------------------------------------------
 CXformLeftAntiSemiJoin2HashJoin is disabled
(1 row)

select disable_xform('CXformLeftAntiSemiJoinNotIn2HashJoinNotIn');
                     disable_xform                     
-------------------------------------------------------
 CXformLeftAntiSemiJoinNotIn2HashJoinNotIn is disabled
(1 row)

select disable_xform('CXformLeftOuterJoin2HashJoin');
              disable_xform               
------------------------------------------
 CXformLeftOuterJoin2HashJoin is disabled
(1 row)

select disable_xform('CXformLeftSemiJoin2HashJoin');
              disable_xform              
-----------------------------------------
 CXformLeftSemiJoin2HashJoin is disabled
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,4) and hjn_test.j = 4;
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,(array[4])[1]) and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where least (foo.bar,(array[4])[1]) = hjn_test.i and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, least(4,10)) and hjn_test.j = least(4,10);
 count 
-------
     1
(1 row)

select * from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
     f1      |     f1      
-------------+-------------
      123456 |      123456
 -2147483647 | -2147483647
           0 |           0
     -123456 |     -123456
  2147483647 |  2147483647
(5 rows)

reset enable_hashjoin;
-- Enable hashjoin forms fo ORCA
select enable_xform('CXformInnerJoin2HashJoin');
            enable_xform             
-------------------------------------
 CXformInnerJoin2HashJoin is enabled
(1 row)

select enable_xform('CXformLeftAntiSemiJoin2HashJoin');
                enable_xform                
--------------------------------------------
 CXformLeftAntiSemiJoin2HashJoin is enabled
(1 row)

select enable_xform('CXformLeftAntiSemiJoinNotIn2HashJoinNotIn');
                     enable_xform                     
------------------------------------------------------
 CXformLeftAntiSemiJoinNotIn2HashJoinNotIn is enabled
(1 row)

select enable_xform('CXformLeftOuterJoin2HashJoin');
              enable_xform               
-----------------------------------------
 CXformLeftOuterJoin2HashJoin is enabled
(1 row)

select enable_xform('CXformLeftSemiJoin2HashJoin');
              enable_xform              
----------------------------------------
 CXformLeftSemiJoin2HashJoin is enabled
(1 row)

drop schema pred cascade;
NOTICE:  drop cascades to table int4_tbl
NOTICE:  drop cascades to table hjn_test
NOTICE:  drop cascades to table t2
NOTICE:  drop cascades to table t1
