--
-- Tests for password verifiers
--
-- Tests for GUC password_encryption
SET password_hash_algorithm = 'novalue'; -- error
ERROR:  invalid value for parameter "password_hash_algorithm": "novalue"
HINT:  Available values: MD5, SHA-256.
SET password_encryption = on; -- ok
SET password_hash_algorithm = 'md5'; -- ok
SET password_encryption = off; -- ok
-- consistency of password entries
SET password_encryption = off;
CREATE ROLE regress_passwd1 PASSWORD 'role_pwd1';
NOTICE:  resource queue required -- using default resource queue "pg_default"
SET password_encryption = 'on';
SET password_hash_algorithm = 'md5';
CREATE ROLE regress_passwd2 PASSWORD 'role_pwd2';
NOTICE:  resource queue required -- using default resource queue "pg_default"
SET password_encryption = 'on';
CREATE ROLE regress_passwd3 PASSWORD 'role_pwd3';
NOTICE:  resource queue required -- using default resource queue "pg_default"
SET password_encryption = 'off';
CREATE ROLE regress_passwd5 PASSWORD NULL;
NOTICE:  resource queue required -- using default resource queue "pg_default"
-- check list of created entries
-- Since the salt is random, the exact value stored will be different on every test
-- run. Use a regular expression to mask the changing parts.
SELECT rolname, rolpassword
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd%'
    ORDER BY rolname, rolpassword;
     rolname     |             rolpassword             
-----------------+-------------------------------------
 regress_passwd1 | role_pwd1
 regress_passwd2 | md54044304ba511dd062133eb5b4b84a2a3
 regress_passwd3 | md50e5699b6911d87f17a08b8d76a21e8b8
 regress_passwd5 | 
(4 rows)

-- Rename a role
ALTER ROLE regress_passwd3 RENAME TO regress_passwd3_new;
NOTICE:  MD5 password cleared because of role rename
-- md5 entry should have been removed
SELECT rolname, rolpassword
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd3_new'
    ORDER BY rolname, rolpassword;
       rolname       | rolpassword 
---------------------+-------------
 regress_passwd3_new | 
(1 row)

ALTER ROLE regress_passwd3_new RENAME TO regress_passwd3;
-- ENCRYPTED and UNENCRYPTED passwords
ALTER ROLE regress_passwd1 UNENCRYPTED PASSWORD 'foo'; -- unencrypted
ALTER ROLE regress_passwd2 UNENCRYPTED PASSWORD 'md5dfa155cadd5f4ad57860162f3fab9cdb'; -- encrypted with MD5
SET password_encryption = 'on';
SET password_hash_algorithm = 'md5';
ALTER ROLE regress_passwd3 ENCRYPTED PASSWORD 'foo'; -- encrypted with MD5
SELECT rolname, rolpassword
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd%'
    ORDER BY rolname, rolpassword;
     rolname     |             rolpassword             
-----------------+-------------------------------------
 regress_passwd1 | foo
 regress_passwd2 | md5dfa155cadd5f4ad57860162f3fab9cdb
 regress_passwd3 | md5530de4c298af94b3b9f7d20305d2a1bf
 regress_passwd5 | 
(4 rows)

-- An empty password is not allowed, in any form
CREATE ROLE regress_passwd_empty PASSWORD '';
NOTICE:  resource queue required -- using default resource queue "pg_default"
ALTER ROLE regress_passwd_empty PASSWORD 'md585939a5ce845f1a1b620742e3c659e0a';
ALTER ROLE regress_passwd_empty PASSWORD 'SCRAM-SHA-256$4096:hpFyHTUsSWcR7O9P$LgZFIt6Oqdo27ZFKbZ2nV+vtnYM995pDh9ca6WSi120=:qVV5NeluNfUPkwm7Vqat25RjSPLkGeoZBQs6wVv+um4=';
SELECT rolpassword FROM pg_authid WHERE rolname='regress_passwd_empty';
             rolpassword             
-------------------------------------
 md59b7ebcc0db352c57821c26b28d17e180
(1 row)

DROP ROLE regress_passwd1;
DROP ROLE regress_passwd2;
DROP ROLE regress_passwd3;
DROP ROLE regress_passwd5;
DROP ROLE regress_passwd_empty;
-- all entries should have been removed
SELECT rolname, rolpassword
    FROM pg_authid
    WHERE rolname LIKE 'regress_passwd%'
    ORDER BY rolname, rolpassword;
 rolname | rolpassword 
---------+-------------
(0 rows)

