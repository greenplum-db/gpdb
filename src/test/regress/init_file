-- start_matchignore
# match ignore the gpmon WARNING message
m/^WARNING:  gpmon:.*Connection refused.*/
s/^WARNING:  gpmon:.*Connection refused.*//

# MPP-20400
m/^WARNING:  gpmon:.*No buffer space available socket.*/
s/^WARNING:  gpmon:.*No buffer space available socket.*//

m/^ Optimizer status:.*/
s/^ Optimizer status:.*//

# We have disabled ignoring NOTICE statements as a part of this change
# However we would still like to ignore some NOTICE statements which are
# harmless and show up regulary.

# The following NOTICE is generated when the user does not explicitly specify a
# distribution policy for a table. It is to inform the user that the database
# will pick a particular column in order to distribute the data.
m/^NOTICE:.*Table doesn't have 'DISTRIBUTED BY' clause -- Using column named '.*' as the Greenplum Database data distribution key for this table./
s/^NOTICE:.*Table doesn't have 'DISTRIBUTED BY' clause -- Using column named '.*' as the Greenplum Database data distribution key for this table.//

# The following NOTICE is generated when a serial data type is used for a
# column. It is to inform the user that database will implicitly
# create a sequence.
m/^NOTICE:.*will create implicit sequence ".*" for serial column ".*"/
s/^NOTICE:.*will create implicit sequence ".*" for serial column ".*"//

# The following NOTICE is generated when a partitioned table is created. For
# each child partition that gets created, it will generate a NOTICE saying that
# it is creating that particular partition.
m/^NOTICE:.*CREATE TABLE will create partition ".*" for table ".*"/
s/^NOTICE:.*CREATE TABLE will create partition ".*" for table ".*"//

# The following NOTICE is generated when using DROP IF EXITS.
m/^NOTICE:.*table ".*" does not exist, skipping/
s/^NOTICE:.*table ".*" does not exist, skipping//

# The following NOTICE is generated when creating a role. It is to inform the
# user that the database will assign the default resource queue to the role if
# the user has not explicitly specified one.
m/^NOTICE:.*resource queue required -- using default resource queue ".*"/
s/^NOTICE:.*resource queue required -- using default resource queue ".*"//

# The following NOTICE is generated when a user creates an index on the parent
# partition table. For each child partition, it informs the user that the
# database will create an index for that parition.
m/NOTICE:.*building index for child partition ".*"/
s/NOTICE:.*building index for child partition ".*"//

# The following NOTICE is generated when a user tries to split a partition or
# exchange a partition with the default partition.
m/^NOTICE:.*exchanged partition ".*" with relation ".*"/
s/^NOTICE:.*exchanged partition ".*" with relation ".*"//

# The following two NOTICEs are generated when user runs CREATE function. In
# some cases, when the database creates a function internally, the NOTICE might
# have OIDs embedded in it.
# For e.g  NOTICE:  return type pg_atsdb_133977_2_3 is only a shell. It is not
# really providing useful information to the user and hence can be ignored.
m/^NOTICE:.*return type .* is only a shell/
s/^NOTICE:.*return type .* is only a shell//

m/^NOTICE:.*argument type .* is only a shell/
s/^NOTICE:.*argument type .* is only a shell//

# The following NOTICE is generated when a user creates a table with no
# columns. E.g CREATE TABLE foo(). It is to inform the user that database
# cannot find any columns on which to distribute the data.
m/^NOTICE:.*Table has no attributes to distribute on./
s/^NOTICE:.*Table has no attributes to distribute on.//

# The following NOTICE is generated in the test polymorphism.sql. The test
# creates a user defined function called "bleat" which raises the NOTICE.
# The function takes an int as input and just prints it out using NOTICE.
# The reason for ignoring this is because in the test, the NOTICE statements
# are generated in a different order for each test run.
m/^NOTICE:.*bleat .*/
s/^NOTICE:.*bleat .*//

# The following NOTICE is generated when a table has a column with PRIMARY KEY
# constraint. It is to inform the user that database will create an implicit index
# for the table for the primary key column(s).
m/.*NOTICE:.*will create implicit index ".*" for table ".*"/
s/.*NOTICE:.*will create implicit index ".*" for table ".*"//

# The following NOTICE is generated when the language which a user is trying to
# create already exists. It is to inform the user that database will skip
# the creation of the language since it already exists.
m/^NOTICE:.*language ".*" already exists, skipping/
s/^NOTICE:.*language ".*" already exists, skipping//

# The following NOTICE is generated when a user runs DROP FUNCTION IF EXISTS.
# It is to inform that user that database could not find the function and hence
# will skip dropping it.
m/^NOTICE:.*function .* does not exist, skipping/
s/^NOTICE:.*function .* does not exist, skipping//

# The following NOTICE is generated when user sets the guc
# gp_create_table_random_default_distribution. It is to inform the user that if
# a distribution policy was not specified, the database will assumed random
# distribution policy.
m/^NOTICE:.*Using default RANDOM distribution since no distribution was specified./
s/^NOTICE:.*Using default RANDOM distribution since no distribution was specified.//

# The following NOTICE is generated when user runs ANALYZE. The NOTICE message
# generated seems to be non deterministic in that separate test runs produce
# the NOTICE for different tables and different number of tables. For E.g in one
# test run it produced the following NOTICE for pg_auth and in other it
# produced a NOTICE for pg_auth and pg_auth_constraints.
m/^NOTICE:.*ANALYZE detected all empty sample pages for table .*, please run VACUUM FULL for accurate estimation/
s/^NOTICE:.*ANALYZE detected all empty sample pages for table .*, please run VACUUM FULL for accurate estimation//

-- end_matchignore

-- start_matchsubs
#entry db matches
m/\s+\(entry db(.*)+\spid=\d+\)/
s/\s+\(entry db(.*)+\spid=\d+\)//

#remove unecessary diffs due to SOMEFILE:SOMEFUNC
m/\(SOMEFILE:SOMEFUNC\)/
s/\(SOMEFILE:SOMEFUNC\)//

m/\(COptTasks\.cpp:\d+\)/
s/\(COptTasks\.cpp:\d+\)//

m/\(cdbdisp\.c:\d+\)/
s/\(cdbdisp\.c:\d+\)//

#In alter_table_distribution_policy tests, some test cases emit NOTICE message
#like the following
#drop cascades to function pg_atsdb_211851_2_4_out.
#The name contains OID embedded in it and it can change with test runs. We want
#to remove these and diff the rest.
m/^NOTICE:.*drop cascades to.*/
s/^NOTICE:.*drop cascades to.*/^NOTICE: drop cascades to /

#When running vacuum_gp tests, some test cases emit NOTICE message like the
#following
#relation "pg_aoseg_395635" TID 0/1: DeleteTransactionInProgress 65522 --- can't shrink relation
#The message has OID and Transaction ID embedded in it which can change with
#test runs. We want to remove these and diff the rest of the message.
m/^NOTICE:.*relation ".*" TID .*TransactionInProgress .* --- can't shrink relation/
s/^NOTICE:.*relation ".*" TID .*TransactionInProgress .* --- can't shrink relation/^NOTICE: relation TransactionInProgress cant shrink relation/

-- end_matchsubs
