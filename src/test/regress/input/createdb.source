-- start_ignore
\! gpconfig -c create_restartpoint_on_chpt_record_replay -v on --skipvalidation;
\! gpstop -u;
create language plpythonu;
-- end_ignore

--list all database oid relevant directories in all node(master, segments, mirrors, etc.)
CREATE OR REPLACE FUNCTION db_dirs(dboid oid) RETURNS setof text
  STRICT STABLE LANGUAGE plpythonu
as $$
import os
bash_cmd = "find " + os.getcwd() + "/../../ " + "-name %d -type d"
p = os.popen(bash_cmd % dboid)
return p.readlines()
$$;

--this group udf help test case wait mirror cacheup
CREATE OR REPLACE FUNCTION insert_noop_xlog_record_master() RETURNS VOID AS
'@abs_builddir@/regress.so', 'insert_noop_xlog_record'
    LANGUAGE C EXECUTE ON MASTER;
CREATE OR REPLACE FUNCTION insert_noop_xlog_record_all_segments() RETURNS SETOF VOID AS
'@abs_builddir@/regress.so', 'insert_noop_xlog_record'
    LANGUAGE C EXECUTE ON ALL SEGMENTS;
CREATE OR REPLACE FUNCTION insert_noop_xlog_record() RETURNS VOID AS $$
BEGIN
    PERFORM insert_noop_xlog_record_master();
    PERFORM insert_noop_xlog_record_all_segments();
END;
$$LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION force_mirrors_to_catch_up() RETURNS VOID AS $$
BEGIN
    PERFORM gp_inject_fault2('after_xlog_redo_noop', 'sleep', dbid, hostname, port) FROM gp_segment_configuration WHERE role='m';
    PERFORM insert_noop_xlog_record();
    PERFORM gp_wait_until_triggered_fault2('after_xlog_redo_noop', 1, dbid, hostname, port) FROM gp_segment_configuration WHERE role='m';
    PERFORM gp_inject_fault2('after_xlog_redo_noop', 'reset', dbid, hostname, port) FROM gp_segment_configuration WHERE role='m';
END;
$$ LANGUAGE plpgsql;


--
--CASE 0: createdb do well
--
create database dowell;
select force_mirrors_to_catch_up();
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'dowell') as foo;

\! psql -d dowell -c "create table test1(a int, b text)"
\! psql -d dowell -c "insert into test1 values (1, '111'), (2, '222'), (3, '333')"
\! psql -d dowell -c "select * from test1" 

drop database dowell;



--
--CASE 1: error in segment after db file physically created
--
--reset status
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
-- inject fault on content0 primary to error out after copying
-- template db directory
select gp_inject_fault2('create_db_after_file_copy', 'error', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';

-- should fail
create database db_with_leftover_files;

-- Wait until replay_location = flush_location.
select force_mirrors_to_catch_up();

set gp_select_invisible=on;
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db_with_leftover_files') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db_with_leftover_files';
-- end_ignore

-- cleanup
set gp_select_invisible=off;



--
--CASE 2: error after XLOG_DBASE_CREATE on master
--
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
select gp_inject_fault2('after_xlog_create_database', 'error', dbid, hostname, port)
from gp_segment_configuration where content=-1 and role='p';
-- should fail
create database db2;

select force_mirrors_to_catch_up();

set gp_select_invisible=on;
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db2') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db2';
-- end_ignore

set gp_select_invisible=off;



--
--CASE 3: error after XLOG_DBASE_CREATE on segment
--
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
select gp_inject_fault2('after_xlog_create_database', 'error', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';
-- should fail
create database db3;

select force_mirrors_to_catch_up();

set gp_select_invisible=on;
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db3') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db3';
-- end_ignore

set gp_select_invisible=off;



--
--CASE 4: panic after XLOG_XACT_PREPARE on segment
--
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
select gp_inject_fault2('end_prepare_two_phase', 'panic', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';
select gp_inject_fault2('fts_probe', 'skip', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';
-- should fail
create database db4;

select force_mirrors_to_catch_up();

set gp_select_invisible=on;
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db4') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db4';
-- end_ignore

set gp_select_invisible=off;



--
--CASE 5: error before XLOG_XACT_PREPARE on segment 
--
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
select gp_inject_fault2('before_xlog_xact_prepare', 'error', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';
-- should fail
create database db5;

select force_mirrors_to_catch_up();

set gp_select_invisible=on;
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db5') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db5';
-- end_ignore

set gp_select_invisible=off;



--CASE 6: panic before XLOG_XACT_PREPARE on segment
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
select gp_inject_fault2('before_xlog_xact_prepare', 'panic', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';
select gp_inject_fault2('fts_probe', 'skip', dbid, hostname, port)
from gp_segment_configuration where content=0 and role='p';
-- should fail
create database db6;

select force_mirrors_to_catch_up();

set gp_select_invisible=on;
-- panic raised before transaction record, we have no hint to clean after qe restart
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db6') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db6';
-- end_ignore

set gp_select_invisible=off;

--CASE 7: error before XLOG_XACT_DISTRIBUTED_COMMIT on master
--reset status
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
select gp_inject_fault2('before_xlog_xact_distributed_commit', 'error', dbid, hostname, port)
from gp_segment_configuration where content=-1 and role='p';
-- should fail
create database db7;

select force_mirrors_to_catch_up();

set gp_select_invisible=on;
select count(*)=0 as result from
  (select db_dirs(oid) from pg_database where datname = 'db7') as foo;

-- start_ignore
select db_dirs(oid) from pg_database where datname = 'db7';
-- end_ignore

set gp_select_invisible=off;

-- start_ignore
select gp_inject_fault2('all', 'reset', dbid, hostname, port) from gp_segment_configuration;
\! gpconfig -r create_restartpoint_on_chpt_record_replay --skipvalidation;
\! gpstop -u;
-- end_ignore
